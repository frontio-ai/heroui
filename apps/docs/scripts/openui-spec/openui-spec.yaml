name: HeroUI
components:
  accordion:
    package: '@heroui/accordion'
    props:
      children:
        type: ReactNode | ReactNode[]
        description: The contents of the collection. Usually the array of AccordionItem
      variant:
        type: string
        enum:
          - light
          - shadow
          - bordered
          - splitted
        default: light
        description: The accordion appearance style.
      selectionMode:
        type: string
        enum:
          - none
          - single
          - multiple
        description: The type of selection that is allowed in the collection.
      selectionBehavior:
        type: string
        enum:
          - toggle
          - replace
        default: toggle
        description: The accordion selection behavior.
      isCompact:
        type: boolean
        default: false
        description: Whether all Accordion items should be smaller.
      isDisabled:
        type: boolean
        default: false
        description: Whether the Accordion items are disabled.
      showDivider:
        type: boolean
        default: true
        description: Whether to display a divider at the bottom of the each accordion item.
      dividerProps:
        type: DividerProps
        description: The divider component props.
      hideIndicator:
        type: boolean
        default: false
        description: Whether the Accordion items indicator is hidden.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the Accordion items open/close animation is disabled.
      disableIndicatorAnimation:
        type: boolean
        default: false
        description: Whether the Accordion items indicator animation is disabled.
      disallowEmptySelection:
        type: boolean
        default: false
        description: Whether the collection allows empty selection.
      keepContentMounted:
        type: boolean
        default: false
        description: Whether the Accordion items content should be always mounted.
      fullWidth:
        type: boolean
        default: true
        description: Whether the accordion should take up the full width of its parent container.
      motionProps:
        type: MotionProps
        description: The motion properties of the Accordion.
      disabledKeys:
        type: React.Key[]
        description: The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.
      itemClasses:
        type: AccordionItemClassnames
        description: The accordion items classNames.
      selectedKeys:
        type: all | React.Key[]
        description: The currently selected keys in the collection (controlled).
      defaultSelectedKeys:
        type: all | React.Key[]
        description: The initial selected keys in the collection (uncontrolled).
    events:
      onSelectionChange:
        type: '(keys: "all" | Set<React.Key>) => any'
        description: Handler that is called when the selection changes.
  alert:
    package: '@heroui/alert'
    props:
      title:
        type: ReactNode
        description: The alert title
      icon:
        type: ReactNode
        description: The alert icon - overrides the default icon
      description:
        type: ReactNode
        description: The alert description
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The alert color theme
      variant:
        type: string
        enum:
          - solid
          - bordered
          - flat
          - faded
        default: flat
        description: The alert variant
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        default: md
        description: The alert border radius
      startContent:
        type: ReactNode
        description: The alert start content
      endContent:
        type: ReactNode
        description: The alert end content
      isVisible:
        type: boolean
        description: Whether the alert is visible
      isClosable:
        type: boolean
        default: false
        description: Whether the alert can be closed
      hideIcon:
        type: boolean
        default: false
        description: Whether the icon is hidden
      hideIconWrapper:
        type: boolean
        default: false
        description: Whether the icon wrapper is hidden
      closeButtonProps:
        type: ButtonProps
        description: Props for the close button
    events:
      onClose:
        type: () => void
        description: Handler called when the close button is clicked
      onVisibleChange:
        type: '(isVisible: boolean) => void'
        description: Handler called when the alert visibility changes
  autocomplete:
    package: '@heroui/autocomplete'
    props:
      children*:
        type: ReactNode[]
        description: The children to render. Usually a list of AutocompleteItem and AutocompleteSection elements.
      label:
        type: ReactNode
        description: The content to display as the label.
      name:
        type: string
        description: The name of the input element, used when submitting an HTML form.
      variant:
        type: string
        enum:
          - flat
          - bordered
          - faded
          - underlined
        default: flat
        description: The variant of the Autocomplete.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the Autocomplete.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the Autocomplete.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The radius of the Autocomplete.
      items:
        type: Iterable<T>
        description: The list of Autocomplete items. (controlled)
      defaultItems:
        type: Iterable<T>
        description: The list of Autocomplete items (uncontrolled).
      inputValue:
        type: string
        description: The value of the Autocomplete input (controlled).
      defaultInputValue:
        type: string
        description: The value of the Autocomplete input (uncontrolled).
      allowsCustomValue:
        type: boolean
        default: false
        description: Whether the Autocomplete allows a non-item matching input value to be set.
      allowsEmptyCollection:
        type: boolean
        default: true
        description: Whether the autocomplete allows the menu to be open when the collection is empty.
      shouldCloseOnBlur:
        type: boolean
        default: true
        description: Whether the Autocomplete should close when the input is blurred.
      placeholder:
        type: string
        description: Temporary text that occupies the text input when it is empty.
      description:
        type: ReactNode
        description: A description for the field. Provides a hint such as specific requirements for what to choose.
      menuTrigger:
        type: string
        enum:
          - focus
          - input
          - manual
        default: focus
        description: The action that causes the menu to open.
      labelPlacement:
        type: string
        enum:
          - inside
          - outside
          - outside-left
        default: inside
        description: The position of the label.
      selectedKey:
        type: React.Key
        description: The currently selected key in the collection (controlled).
      defaultSelectedKey:
        type: React.Key
        description: The initial selected key in the collection (uncontrolled).
      disabledKeys:
        type: all | React.Key[]
        description: The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.
      errorMessage:
        type: 'ReactNode | ((v: ValidationResult) => ReactNode)'
        description: An error message to display below the field.
      validate:
        type: '(value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined'
        description: Validate input values when committing (e.g. on blur), and return error messages for invalid values.
      validationBehavior:
        type: string
        enum:
          - native
          - aria
        default: native
        description: >-
          Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default
          is `aria`. Otherwise, the default is `native`.
      startContent:
        type: ReactNode
        description: Element to be rendered in the left side of the Autocomplete.
      endContent:
        type: ReactNode
        description: Element to be rendered in the right side of the Autocomplete.
      autoFocus:
        type: boolean
        default: false
        description: Whether the Autocomplete should be focused on render.
      defaultFilter:
        type: '(textValue: string, inputValue: string) => boolean'
        description: The filter function used to determine if a option should be included in the Autocomplete list.
      filterOptions:
        type: Intl.CollatorOptions
        default: '{ sensitivity: ''base''}'
        description: The options used to create the collator used for filtering.
      maxListboxHeight:
        type: number
        default: 256
        description: The maximum height of the listbox in pixels. Required when using virtualization.
      itemHeight:
        type: number
        default: 32
        description: The fixed height of each item in pixels. Required when using virtualization.
      isVirtualized:
        type: boolean
        description: Whether to enable virtualization. By default, it's enabled when the number of items exceeds 50.
      isReadOnly:
        type: boolean
        default: false
        description: Whether the Autocomplete is read only.
      isRequired:
        type: boolean
        default: false
        description: Whether the Autocomplete is required.
      isInvalid:
        type: boolean
        default: false
        description: Whether the Autocomplete is invalid.
      isDisabled:
        type: boolean
        default: false
        description: Whether the Autocomplete is disabled.
      fullWidth:
        type: boolean
        default: true
        description: Whether the input should take up the width of its parent.
      selectorIcon:
        type: ReactNode
        description: The icon that represents the autocomplete open state. Usually a chevron icon.
      clearIcon:
        type: ReactNode
        description: The icon to be used in the clear button. Usually a cross icon.
      showScrollIndicators:
        type: boolean
        default: true
        description: Whether the scroll indicators should be shown when the listbox is scrollable.
      scrollRef:
        type: React.RefObject<HTMLElement>
        description: A ref to the scrollable element.
      inputProps:
        type: InputProps
        description: Props to be passed to the Input component.
      popoverProps:
        type: PopoverProps
        description: Props to be passed to the Popover component.
      listboxProps:
        type: ListboxProps
        description: Props to be passed to the Listbox component.
      scrollShadowProps:
        type: ScrollShadowProps
        description: Props to be passed to the ScrollShadow component.
      selectorButtonProps:
        type: ButtonProps
        description: Props to be passed to the selector button.
      clearButtonProps:
        type: ButtonProps
        description: Props to be passed to the clear button.
      isClearable:
        type: boolean
        default: true
        description: Whether the clear button should be shown.
      disableClearable:
        type: boolean
        default: false
        description: Whether the clear button should be hidden. (Deprecated) Use isClearable instead.
      disableAnimation:
        type: boolean
        default: true
        description: Whether the Autocomplete should be animated.
      disableSelectorIconRotation:
        type: boolean
        default: false
        description: Whether the select should disable the rotation of the selector icon.
      classNames:
        type: >-
          Partial<Record<'base' | 'listboxWrapper' | 'listbox' | 'popoverContent' | 'endContentWrapper' | 'clearButton'
          | 'selectorButton', string>>
        description: Allows to set custom class names for the Autocomplete slots.
    events:
      onOpenChange:
        type: '(isOpen: boolean, menuTrigger?: MenuTriggerAction) => void'
        description: >-
          Method that is called when the open state of the menu changes. Returns the new open state and the action that
          caused the opening of the menu.
      onInputChange:
        type: '(value: string) => void'
        description: Handler that is called when the Autocomplete input value changes.
      onSelectionChange:
        type: '(key: React.Key) => void'
        description: Handler that is called when the Autocomplete selection changes.
      onFocus:
        type: '(e: FocusEvent<HTMLInputElement>) => void'
        description: Handler that is called when the Autocomplete input is focused.
      onBlur:
        type: '(e: FocusEvent<HTMLInputElement>) => void'
        description: Handler that is called when the Autocomplete input is blurred.
      onFocusChange:
        type: '(isFocused: boolean) => void'
        description: Handler that is called when the Autocomplete input focus changes.
      onKeyDown:
        type: '(e: KeyboardEvent) => void'
        description: Handler that is called when a key is pressed.
      onKeyUp:
        type: '(e: KeyboardEvent) => void'
        description: Handler that is called when a key is released.
      onClose:
        type: () => void
        description: Handler that is called when the Autocomplete's Popover is closed.
  avatar:
    package: '@heroui/avatar'
    props:
      src:
        type: string
        description: The source URL of the image to be displayed.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: Sets the avatar background color.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        default: full
        description: Sets the avatar border radius.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: Sets the avatar size.
      name:
        type: string
        description: Displays the initials if the image is not provided or fails to load.
      icon:
        type: ReactNode
        description: Displays a custom icon inside the avatar.
      fallback:
        type: ReactNode
        description: A custom fallback component to display when the image fails to load.
      isBordered:
        type: boolean
        default: false
        description: If true, adds a border around the avatar.
      isDisabled:
        type: boolean
        default: false
        description: If true, disables the avatar and applies a disabled styling.
      isFocusable:
        type: boolean
        default: false
        description: If true, makes the avatar focusable for keyboard navigation.
      showFallback:
        type: boolean
        default: false
        description: If true, shows the fallback icon or initials when the image fails to load.
      ImgComponent:
        type: React.ElementType
        default: img
        description: The component to be used as the image element.
      imgProps:
        type: ImgComponentProps
        description: Props to be passed to the image element.
      classNames:
        type: Partial<Record<"base" | "img" | "fallback" | "name" | "icon", string>>
        description: Allows to set custom class names for the avatar slots.
    events:
      max:
        type: number
        default: 5
        description: The maximum number of visible avatars
      total:
        type: number
        description: Control the number of avatar not visible
      size:
        type: AvatarProps['size']
        description: Size of the avatars
      color:
        type: AvatarProps['color']
        description: Color of the avatars
      radius:
        type: AvatarProps['radius']
        description: Radius of the avatars
      isGrid:
        type: boolean
        default: false
        description: Whether the avatars should be displayed in a grid
      isDisabled:
        type: boolean
        description: Whether the avatars are disabled
      isBordered:
        type: boolean
        description: Whether the avatars have a border
      renderCount:
        type: '(count: number) => ReactNode'
        description: This allows you to render a custom count component.
      classNames:
        type: Partial<Record<"base" | "count", string>>
        description: Allows to set custom class names for the avatar group slots.
  badge:
    package: '@heroui/badge'
    props:
      children:
        type: ReactNode
        description: The wrapped component.
      content:
        type: string
        enum:
          - string
          - number
          - ReactNode
        description: The content of the badge. The badge will be rendered relative to its children.
      variant:
        type: string
        enum:
          - solid
          - flat
          - faded
          - shadow
        default: solid
        description: The variant style of the badge.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the badge.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the badge.
      shape:
        type: string
        enum:
          - circle
          - rectangle
        default: rectangle
        description: The shape of the badge.
      placement:
        type: string
        enum:
          - top-right
          - top-left
          - bottom-right
          - bottom-left
        default: top-right
        description: The placement of the badge.
      showOutline:
        type: boolean
        default: true
        description: If `true`, the badge will have an outline.
      disableOutline:
        type: boolean
        default: false
        description: If `true`, the badge will not have an outline. **Deprecated** use `showOutline` instead.
      disableAnimation:
        type: boolean
        default: false
        description: If `true`, the badge will not have an animation.
      isInvisible:
        type: boolean
        default: false
        description: If `true`, the badge will be invisible.
      isOneChar:
        type: boolean
        default: false
        description: If `true`, the badge will have the same width and height.
      isDot:
        type: boolean
        default: false
        description: If `true`, the badge will have smaller dimensions.
      classNames:
        type: Partial<Record<"base"｜"badge", string>>
        description: Allows to set custom class names for the badge slots.
    events: {}
  breadcrumbs:
    package: '@heroui/breadcrumbs'
    props:
      children*:
        type: ReactNode
        description: The contents of the Breadcrumbs. Usually a list of `BreadcrumbItem` components.
      variant:
        type: string
        enum:
          - solid
          - bordered
          - light
        default: solid
        description: The Breadcrumbs list appearance style.
      color:
        type: string
        enum:
          - foreground
          - primary
          - secondary
          - success
          - warning
          - danger
        default: foreground
        description: The Breadcrumbs' items color theme.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The Breadcrumbs' items size.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The Breadcrumbs list border radius.
      underline:
        type: string
        enum:
          - none
          - active
          - hover
          - focus
          - always
        default: none
        description: The Breadcrumbs' items underline style.
      separator:
        type: ReactNode
        description: The custom separator between Breadcrumbs. It is a chevron by default.
      maxItems:
        type: number
        description: The maximum number of breadcrumbs to display.
      itemsBeforeCollapse:
        type: number
        description: The number of items to show before the ellipsis.
      itemsAfterCollapse:
        type: number
        description: The number of items to show after the ellipsis.
      hideSeparator:
        type: boolean
        default: false
        description: Whether to hide the separator between breadcrumbs.
      isDisabled:
        type: boolean
        default: false
        description: Whether the Breadcrumbs are disabled except the last item.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the Breadcrumbs should display animations.
      itemClasses:
        type: Partial<Record<"base" | "item" | "separator", string>>
        description: Allows to set custom class names for the breadcrumbs item slots.
      classNames:
        type: Partial<Record<"base" | "list" | "ellipsis" | "separator", string>>
        description: Allows to set custom class names for the breadcrumbs slots.
    events:
      onAction:
        type: '(key: React.Key) => void'
        description: Handler called when any breadcrumb item is pressed. It returns the item key.
  button:
    package: '@heroui/button'
    props:
      children:
        type: ReactNode
        description: The content to display in the button.
      variant:
        type: string
        enum:
          - solid
          - bordered
          - light
          - flat
          - faded
          - shadow
          - ghost
        default: solid
        description: The button appearance style.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The button color theme.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The button size.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The button border radius.
      startContent:
        type: ReactNode
        description: The button start content.
      endContent:
        type: ReactNode
        description: The button end content.
      spinner:
        type: ReactNode
        description: Spinner to display when loading.
      spinnerPlacement:
        type: string
        enum:
          - start
          - end
        default: start
        description: The spinner placement.
      fullWidth:
        type: boolean
        default: false
        description: Whether the button should take the full width of its parent.
      isIconOnly:
        type: boolean
        default: false
        description: Whether the button should have the same width and height.
      isDisabled:
        type: boolean
        default: false
        description: Whether the button is disabled.
      isLoading:
        type: boolean
        default: false
        description: Whether the button is loading.
      disableRipple:
        type: boolean
        default: false
        description: Whether the button should display a ripple effect on press.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the button should display animations.
    events:
      onPress:
        type: '(e: PressEvent) => void'
        description: Handler called when the press is released over the target.
      onPressStart:
        type: '(e: PressEvent) => void'
        description: Handler called when a press interaction starts.
      onPressEnd:
        type: '(e: PressEvent) => void'
        description: Handler called when a press interaction ends, either over the target or when the pointer leaves the target.
      onPressChange:
        type: '(isPressed: boolean) => void'
        description: Handler called when the press state changes.
      onPressUp:
        type: '(e: PressEvent) => void'
        description: >-
          Handler called when a press is released over the target, regardless of whether it started on the target or
          not.
      onKeyDown:
        type: '(e: KeyboardEvent) => void'
        description: Handler called when a key is pressed.
      onKeyUp:
        type: '(e: KeyboardEvent) => void'
        description: Handler called when a key is released.
      onClick:
        type: MouseEventHandler
        description: The native button click event handler (Deprecated) use onPress instead.
  calendar:
    package: '@heroui/calendar'
    props:
      value:
        type: string
        enum:
          - DateValue
          - 'null'
        description: The current value (controlled).
      defaultValue:
        type: string
        enum:
          - DateValue
          - 'null'
        description: The default value (uncontrolled).
      minValue:
        type: DateValue
        description: The minimum allowed date that a user may select.
      maxValue:
        type: DateValue
        description: The maximum allowed date that a user may select.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the time input.
      visibleMonths:
        type: number
        default: 1
        description: >-
          The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will
          disable the showMonthAndYearPickers prop.
      focusedValue:
        type: DateValue
        description: Controls the currently focused date within the calendar.
      defaultFocusedValue:
        type: DateValue
        description: The date that is focused when the calendar first mounts (uncountrolled).
      calendarWidth:
        type: string
        enum:
          - number
          - string
        description: >-
          The width to be applied to the calendar component. This value is multiplied by the visibleMonths number to
          determine the total width of the calendar.
      pageBehavior:
        type: string
        enum:
          - single
          - visible
        default: visible
        description: >-
          Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration
          (default) or one unit of visibleDuration.
      weekdayStyle:
        type: string
        enum:
          - narrow
          - short
          - long
          - undefined
        default: narrow
        description: >-
          The style of weekday names to display in the calendar grid header, e.g. single letter, abbreviation, or full
          day name.
      showMonthAndYearPickers:
        type: boolean
        default: false
        description: Whether the label should be crossed out.
      isDisabled:
        type: boolean
        default: false
        description: Whether the calendar is disabled.
      isReadOnly:
        type: boolean
        default: false
        description: Whether the calendar value is immutable.
      isInvalid:
        type: boolean
        description: Whether the current selection is invalid according to application logic.
      autoFocus:
        type: boolean
        default: false
        description: Whether to automatically focus the calendar when it mounts.
      showHelper:
        type: boolean
        default: false
        description: Whether to show the description or error message.
      showShadow:
        type: boolean
        default: false
        description: Whether to show the shadow in the selected date.
      isHeaderExpanded:
        type: boolean
        default: false
        description: >-
          Whether the calendar header is expanded. This is only available if the showMonthAndYearPickers prop is set to
          true.
      isHeaderDefaultExpanded:
        type: boolean
        default: false
        description: >-
          Whether the calendar header should be expanded by default. This is only available if the
          showMonthAndYearPickers prop is set to true.
      topContent:
        type: ReactNode
        description: Custom content to be included in the top of the calendar.
      bottomContent:
        type: ReactNode
        description: Custom content to be included in the bottom of the calendar.
      isDateUnavailable:
        type: '(date: DateValue) => boolean'
        description: Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.
      createCalendar:
        type: '(calendar: SupportedCalendars) => Calendar | null'
        default: all calendars
        description: >-
          This function helps to reduce the bundle size by providing a custom calendar system. You can also use the
          HeroUIProvider to provide the createCalendar function to all nested components.
      errorMessage:
        type: 'ReactNode | (v: ValidationResult) => ReactNode'
        description: An error message for the field.
      hideDisabledDates:
        type: boolean
        default: false
        description: Whether to hide the disabled or invalid dates.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable the animation of the calendar.
      classNames:
        type: >-
          Partial<Record<'base' | 'prevButton' | 'nextButton' | 'headerWrapper' | 'header' | 'title' | 'content' |
          'gridWrapper' | 'grid' | 'gridHeader' | 'gridHeaderRow' | 'gridHeaderCell' | 'gridBody' | 'gridBodyRow' |
          'cell' | 'cellButton' | 'pickerWrapper' | 'pickerMonthList' | 'pickerYearList' | 'pickerHighlight' |
          'pickerItem' | 'helperWrapper' | 'errorMessage', string>>
        description: Allows to set custom class names for the calendar slots.
    events:
      onChange:
        type: '(value: MappedDateValue) => void'
        description: Handler that is called when the value changes.
      onFocusChange:
        type: '(date: CalendarDate) => void'
        description: Handler that is called when the focused date changes.
      onHeaderExpandedChange:
        type: '(isExpanded: boolean) => void'
        description: >-
          The event handler for the calendar header expanded state. This is only available if the
          showMonthAndYearPickers prop is set to true.
  card:
    package: '@heroui/card'
    props:
      children:
        type: ReactNode | ReactNode[]
        description: Usually the Card parts, `CardHeader`, `CardBody` and `CardFooter`.
      shadow:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
        default: md
        description: The card shadow.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
        default: lg
        description: The card border radius.
      fullWidth:
        type: boolean
        default: false
        description: Whether the card should take the full width of its parent.
      isHoverable:
        type: boolean
        default: false
        description: Whether the card should change the background on hover.
      isPressable:
        type: boolean
        default: false
        description: Whether the card should allow to be pressed.
      isBlurred:
        type: boolean
        default: false
        description: Whether the card background should be blurred.
      isFooterBlurred:
        type: boolean
        default: false
        description: Whether the card footer background should be blurred.
      isDisabled:
        type: boolean
        default: false
        description: Whether the card should be disabled. The press events will be ignored.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable the animation.
      disableRipple:
        type: boolean
        default: false
        description: Whether to disable ripple effect. Only when `isPressable` is true.
      allowTextSelectionOnPress:
        type: boolean
        default: false
        description: Whether to allow text selection on pressing. Only when `isPressable` is true.
      classNames:
        type: Partial<Record<'base' | 'header' | 'body' | 'footer', string>>
        description: Allows to set custom class names for the card slots.
    events:
      onPress:
        type: '(e: PressEvent) => void'
        description: Handler that is called when the press is released over the target.
      onPressStart:
        type: '(e: PressEvent) => void'
        description: Handler that is called when a press interaction starts.
      onPressEnd:
        type: '(e: PressEvent) => void'
        description: >-
          Handler that is called when a press interaction ends, either over the target or when the pointer leaves the
          target.
      onPressChange:
        type: '(isPressed: boolean) => void'
        description: Handler that is called when the press state changes.
      onPressUp:
        type: '(e: PressEvent) => void'
        description: >-
          Handler that is called when a press is released over the target, regardless of whether it started on the
          target or not.
  checkbox-group:
    package: '@heroui/checkbox-group'
    props:
      children:
        type: ReactNode[] | ReactNode[]
        description: The checkboxes items.
      orientation:
        type: string
        enum:
          - vertical
          - horizontal
        default: vertical
        description: The axis the checkbox group items should align with.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: primary
        description: The color of the checkboxes.
      size:
        type: string
        enum:
          - xs
          - sm
          - md
          - lg
          - xl
        default: md
        description: The size of the checkboxes.
      radius:
        type: string
        enum:
          - none
          - base
          - xs
          - sm
          - md
          - lg
          - xl
          - full
        default: md
        description: The radius of the checkboxes.
      name:
        type: string
        description: The name of the CheckboxGroup, used when submitting an HTML form.
      label:
        type: string
        description: The label of the CheckboxGroup.
      value:
        type: string[]
        description: The current selected values. (controlled)
      lineThrough:
        type: boolean
        default: false
        description: Whether the checkboxes label should be crossed out.
      defaultValue:
        type: string[]
        description: The default selected values. (uncontrolled)
      isInvalid:
        type: boolean
        default: false
        description: Whether the checkbox group is invalid.
      validationState:
        type: string
        enum:
          - valid
          - invalid
        description: Whether the inputs should display its "valid" or "invalid" visual styling. (Deprecated) use isInvalid instead.
      description:
        type: ReactNode
        description: The checkbox group description.
      errorMessage:
        type: 'ReactNode | ((v: ValidationResult) => ReactNode)'
        description: The checkbox group error message.
      validate:
        type: '(value: string[]) => ValidationError | true | null | undefined'
        description: >-
          Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation
          errors are displayed upon form submission if validationBehavior is set to native. For real-time validation,
          use the isInvalid prop.
      validationBehavior:
        type: string
        enum:
          - native
          - aria
        default: native
        description: >-
          Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default
          is `aria`. Otherwise, the default is `native`.
      isDisabled:
        type: boolean
        default: false
        description: Whether the checkbox group is disabled.
      isRequired:
        type: boolean
        default: false
        description: Whether user checkboxes are required on the input before form submission.
      isReadOnly:
        type: boolean
        description: Whether the checkboxes can be selected but not changed by the user.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the animation should be disabled.
      classNames:
        type: Partial<Record<"base" | "wrapper" | "label", string>>
        description: Allows to set custom class names for the checkbox group slots.
    events:
      onChange:
        type: '(value: string[]) => void'
        description: Handler that is called when the value changes.
  checkbox:
    package: '@heroui/checkbox'
    props:
      children:
        type: ReactNode
        description: The label of the checkbox.
      icon:
        type: CheckboxIconProps
        description: The icon to be displayed when the checkbox is checked.
      value:
        type: string
        description: The value of the checkbox element, used when submitting an HTML form.
      name:
        type: string
        description: The name of the checkbox element, used when submitting an HTML form.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the checkbox.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: primary
        description: The color of the checkbox.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The radius of the checkbox.
      lineThrough:
        type: boolean
        default: false
        description: Whether the label should be crossed out.
      isSelected:
        type: boolean
        description: Whether the element should be selected (controlled).
      defaultSelected:
        type: boolean
        description: Whether the element should be selected (uncontrolled).
      isRequired:
        type: boolean
        default: false
        description: Whether user checkbox is required on the checkbox before form submission.
      isReadOnly:
        type: boolean
        description: Whether the checkbox can be selected but not changed by the user.
      isDisabled:
        type: boolean
        default: false
        description: Whether the checkbox is disabled.
      isIndeterminate:
        type: boolean
        description: >-
          Indeterminism is presentational only. The indeterminate visual representation remains regardless of user
          interaction.
      isInvalid:
        type: boolean
        default: false
        description: Whether the checkbox is invalid.
      validationState:
        type: string
        enum:
          - valid
          - invalid
        description: >-
          Whether the checkbox should display its "valid" or "invalid" visual styling. (Deprecated) use isInvalid
          instead.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the animation should be disabled.
      classNames:
        type: Partial<Record<"base"｜ "wrapper"｜ "icon"｜ "label", string>>
        description: Allows to set custom class names for the checkbox slots.
    events:
      onChange:
        type: React.ChangeEvent<HTMLInputElement>
        description: >-
          Handler that is called when the element's selection state changes. You can pull out the new checked state by
          accessing event.target.checked (boolean).
      onValueChange:
        type: '(isSelected: boolean) => void'
        description: Handler that is called when the element's selection state changes.
  chip:
    package: '@heroui/chip'
    props:
      children:
        type: ReactNode
        description: The content of the chip.
      variant:
        type: string
        enum:
          - solid
          - bordered
          - light
          - flat
          - faded
          - shadow
          - dot
        default: solid
        description: The chip appearance style.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the chip.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the chip.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        default: full
        description: The radius of the chip.
      avatar:
        type: ReactNode
        description: Avatar to be rendered in the left side of the chip.
      startContent:
        type: ReactNode
        description: Element to be rendered in the left side of the chip. This prop overrides the avatar prop.
      endContent:
        type: ReactNode
        description: >-
          Element to be rendered in the right side of the chip. This prop overrides the default close button when
          onClose is passed.
      isDisabled:
        type: boolean
        default: false
        description: Whether the chip is disabled.
      classNames:
        type: Partial<Record<"base" | "content" | "dot" | "avatar" | "closeButton", string>>
        description: Allows to set custom class names for the chip slots.
    events:
      onClose:
        type: '(e: PressEvent) => void'
        description: >-
          Handler that is called when the close button is pressed. If you pass this prop, the chip will display a close
          button (endContent).
  circular-progress:
    package: '@heroui/circular-progress'
    props:
      label:
        type: ReactNode
        description: The content to display as the label.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the indicator.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: primary
        description: The color of the indicator.
      value:
        type: number
        description: The current value (controlled).
      valueLabel:
        type: ReactNode
        description: The content to display as the value's label (e.g. 1 of 4).
      minValue:
        type: number
        default: 0
        description: The smallest value allowed for the input.
      maxValue:
        type: number
        default: 100
        description: The largest value allowed for the input.
      formatOptions:
        type: Intl.NumberFormat
        default: '{style: ''percent''}'
        description: The options to format the value.
      isIndeterminate:
        type: boolean
        default: true
        description: Whether the progress is indeterminate.
      showValueLabel:
        type: boolean
        default: true
        description: Whether to show the value label.
      strokeWidth:
        type: number
        default: 2
        description: The width of the progress stroke.
      isDisabled:
        type: boolean
        default: false
        description: Whether the progress is disabled.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable the animation.
      classNames:
        type: Partial<Record<'base'｜'svgWrapper'｜'svg'｜'track'｜'indicator'｜'value'｜'label', string>>
        description: Allows to set custom class names for the circular progress slots.
    events: {}
  code:
    package: '@heroui/code'
    props:
      children:
        type: ReactNode
        description: The content of the code.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: sm
        description: The size of the code.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the code.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        default: sm
        description: The radius of the code.
    events: {}
  date-input:
    package: '@heroui/date-input'
    props:
      label:
        type: ReactNode
        description: The content to display as the label.
      value:
        type: DateValue
        description: The current value of the date input (controlled).
      defaultValue:
        type: DateValue
        description: The default value of the date input (uncontrolled).
      variant:
        type: string
        enum:
          - flat
          - bordered
          - faded
          - underlined
        default: flat
        description: The variant of the date input.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the date input.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the date input.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The radius of the date input.
      placeholderValue:
        type: DateValue
        description: >-
          A placeholder time that influences the format of the placeholder shown when no value is selected. Defaults
          current date at midnight.
      minValue:
        type: DateValue
        description: The minimum allowed date that a user may select.
      maxValue:
        type: DateValue
        description: The maximum allowed date that a user may select.
      locale:
        type: string
        description: The locale to display and edit the value according to.
      description:
        type: ReactNode
        description: A description for the date input. Provides a hint such as specific requirements for what to choose.
      errorMessage:
        type: 'ReactNode | (v: ValidationResult) => ReactNode'
        description: An error message for the date input.
      labelPlacement:
        type: string
        enum:
          - inside
          - outside
          - outside-left
        default: inside
        description: The position of the label.
      isRequired:
        type: boolean
        default: false
        description: Whether user input is required on the input before form submission.
      isReadOnly:
        type: boolean
        description: Whether the input can be selected but not changed by the user.
      isDisabled:
        type: boolean
        default: false
        description: Whether the input is disabled.
      isInvalid:
        type: boolean
        default: false
        description: Whether the input value is invalid.
      autoFocus:
        type: boolean
        default: false
        description: Whether the element should receive focus on render.
      hideTimeZone:
        type: boolean
        default: false
        description: Whether to hide the time zone abbreviation.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable animations.
    events:
      onChange:
        type: '(value: ZonedDateTime | CalendarDate | CalendarDateTime) => void'
        description: Handler that is called when the date-input's value changes.
      onFocus:
        type: '(e: FocusEvent<HTMLInputElement>) => void'
        description: Handler that is called when the element receives focus.
      onBlur:
        type: '(e: FocusEvent<HTMLInputElement>) => void'
        description: Handler that is called when the element loses focus.
      onFocusChange:
        type: '(isFocused: boolean) => void'
        description: Handler that is called when the element's focus status changes.
      onKeyDown:
        type: '(e: KeyboardEvent) => void'
        description: Handler that is called when a key is pressed.
      onKeyUp:
        type: '(e: KeyboardEvent) => void'
        description: Handler that is called when a key is released.
  date-picker:
    package: '@heroui/date-picker'
    props:
      label:
        type: ReactNode
        description: The content to display as the label.
      value:
        type: string
        enum:
          - ZonedDateTime
          - CalendarDate
          - CalendarDateTime
          - undefined
          - 'null'
        description: The current value of the date-picker (controlled).
      variant:
        type: string
        enum:
          - flat
          - bordered
          - faded
          - underlined
        default: flat
        description: The variant of the date input.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the date input.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the date input.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The radius of the date input.
      defaultValue:
        type: string
        description: The default value of the date-picker (uncontrolled).
      placeholderValue:
        type: string
        enum:
          - ZonedDateTime
          - CalendarDate
          - CalendarDateTime
          - undefined
          - 'null'
        description: The placeholder of the date-picker.
      description:
        type: ReactNode
        description: A description for the date-picker. Provides a hint such as specific requirements for what to choose.
      errorMessage:
        type: 'ReactNode | (v: ValidationResult) => ReactNode'
        description: An error message for the date input.
      validate:
        type: '(value: MappedDateValue<DateValue>) => ValidationError | true | null | undefined'
        description: Validate input values when committing (e.g. on blur), returning error messages for invalid values.
      validationBehavior:
        type: string
        enum:
          - native
          - aria
        default: native
        description: >-
          Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default
          is `aria`. Otherwise, the default is `native`.
      startContent:
        type: ReactNode
        description: Element to be rendered in the left side of the date-picker.
      endContent:
        type: ReactNode
        description: Element to be rendered in the right side of the date-picker.
      labelPlacement:
        type: string
        enum:
          - inside
          - outside
          - outside-left
        default: inside
        description: The position of the label.
      isRequired:
        type: boolean
        default: false
        description: Whether user input is required on the date-picker before form submission.
      isReadOnly:
        type: boolean
        default: false
        description: Whether the date-picker can be selected but not changed by the user.
      isDisabled:
        type: boolean
        default: false
        description: Whether the date-picker is disabled.
      isInvalid:
        type: boolean
        default: false
        description: Whether the date-picker is invalid.
      visibleMonths:
        type: number
        default: 1
        description: The number of months to display at once. Up to 3 months are supported.
      selectorIcon:
        type: ReactNode
        description: The icon to toggle the date picker popover. Usually a calendar icon.
      pageBehavior:
        type: PageBehavior
        default: visible
        description: Controls the behavior of paging.
      calendarWidth:
        type: number
        default: 256
        description: The width to be applied to the calendar component.
      isDateUnavailable:
        type: '(date: DateValue) => boolean'
        description: Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.
      autoFocus:
        type: boolean
        default: false
        description: Whether the element should receive focus on render.
      hourCycle:
        type: string
        enum:
          - '12'
          - '24'
        description: Whether to display the time in 12 or 24 hour format.
      granularity:
        type: string
        enum:
          - day
          - hour
          - minute
          - second
        description: Determines the smallest unit that is displayed in the date picker.
      hideTimeZone:
        type: boolean
        default: false
        description: Whether to hide the time zone abbreviation.
      shouldForceLeadingZeros:
        type: boolean
        default: true
        description: Whether to always show leading zeros in the month, day, and hour fields.
    events:
      onChange:
        type: '(value: ZonedDateTime | CalendarDate | CalendarDateTime) => void'
        description: Handler that is called when the date-picker's value changes.
      onFocus:
        type: '(e: FocusEvent<HTMLInputElement>) => void'
        description: Handler that is called when the element receives focus.
      onBlur:
        type: '(e: FocusEvent<HTMLInputElement>) => void'
        description: Handler that is called when the element loses focus.
      onFocusChange:
        type: '(isFocused: boolean) => void'
        description: Handler that is called when the element's focus status changes.
      onKeyDown:
        type: '(e: KeyboardEvent) => void'
        description: Handler that is called when a key is pressed.
      onKeyUp:
        type: '(e: KeyboardEvent) => void'
        description: Handler that is called when a key is released.
  date-range-picker:
    package: '@heroui/date-range-picker'
    props:
      label:
        type: ReactNode
        description: The content to display as the label.
      value:
        type: RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime> | undefined | null
        description: The current value of the date-range-picker (controlled).
      variant:
        type: string
        enum:
          - flat
          - bordered
          - faded
          - underlined
        default: flat
        description: The variant of the date input.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the date input.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the date input.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The radius of the date input.
      minValue:
        type: RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime> | undefined | null
        description: The minimum value of the date-range-picker.
      maxValue:
        type: RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime> | undefined | null
        description: The maximum value of the date-range-picker.
      defaultValue:
        type: string
        description: The default value of the date-range-picker (uncontrolled).
      placeholderValue:
        type: string
        enum:
          - ZonedDateTime
          - CalendarDate
          - CalendarDateTime
          - undefined
          - 'null'
        description: The placeholder of the date-range-picker.
      description:
        type: ReactNode
        description: A description for the date-range-picker. Provides a hint such as specific requirements for what to choose.
      errorMessage:
        type: 'ReactNode | (v: ValidationResult) => ReactNode'
        description: An error message for the date input.
      validate:
        type: '(value: RangeValue<MappedDateValue<DateValue>>) => ValidationError | true | null | undefined'
        description: Validate input values when committing (e.g. on blur), returning error messages for invalid values.
      validationBehavior:
        type: string
        enum:
          - native
          - aria
        default: native
        description: >-
          Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default
          is `aria`. Otherwise, the default is `native`.
      startContent:
        type: ReactNode
        description: Element to be rendered in the left side of the date-range-picker.
      endContent:
        type: ReactNode
        description: Element to be rendered in the right side of the date-range-picker.
      startName:
        type: string
        description: The name of the start date input element, used when submitting an HTML form.
      endName:
        type: string
        description: The name of the end date input element, used when submitting an HTML form.
      labelPlacement:
        type: string
        enum:
          - inside
          - outside
          - outside-left
        default: inside
        description: The position of the label.
      isOpen:
        type: boolean
        description: Whether the date picker popover is open.
      defaultOpen:
        type: boolean
        default: false
        description: Whether the date picker popover is open by default.
      isRequired:
        type: boolean
        default: false
        description: Whether user input is required on the date-range-picker before form submission.
      isReadOnly:
        type: boolean
        default: false
        description: Whether the date-range-picker can be selected but not changed by the user.
      isDisabled:
        type: boolean
        default: false
        description: Whether the date-range-picker is disabled.
      isInvalid:
        type: boolean
        default: false
        description: Whether the date-range-picker is invalid.
      selectorIcon:
        type: ReactNode
        description: The icon to toggle the date picker popover. Usually a calendar icon.
      pageBehavior:
        type: string
        enum:
          - single
          - visible
        default: visible
        description: Controls the behavior of paging.
      visibleMonths:
        type: number
        default: 1
        description: The number of months to display at once. Up to 3 months are supported.
      autoFocus:
        type: boolean
        default: false
        description: Whether the element should receive focus on render.
      hourCycle:
        type: string
        enum:
          - '12'
          - '24'
        description: Whether to display the time in 12 or 24 hour format.
      granularity:
        type: string
        enum:
          - day
          - hour
          - minute
          - second
        description: Determines the smallest unit that is displayed in the date picker.
      hideTimeZone:
        type: boolean
        default: false
        description: Whether to hide the time zone abbreviation.
      allowsNonContiguousRanges:
        type: boolean
        default: false
        description: When combined with isDateUnavailable, determines whether non-contiguous ranges may be selected.
      shouldForceLeadingZeros:
        type: boolean
        default: true
        description: Whether to always show leading zeros in the month, day, and hour fields.
      calendarWidth:
        type: number
        default: 256
        description: The width to be applied to the calendar component.
      CalendarTopContent:
        type: ReactNode
        description: Top content to be rendered in the calendar component.
      CalendarBottomContent:
        type: ReactNode
        description: Bottom content to be rendered in the calendar component.
      showMonthAndYearPickers:
        type: boolean
        default: false
        description: Whether the calendar should show month and year pickers.
      popoverProps:
        type: PopoverProps
        default: '{ placement: "bottom", triggerScaleOnOpen: false, offset: 13 }'
        description: Props to be passed to the popover component.
      selectorButtonProps:
        type: ButtonProps
        default: '{ size: "sm", variant: "light", radius: "full", isIconOnly: true }'
        description: Props to be passed to the selector button component.
      selectorButtonPlacement:
        type: string
        enum:
          - start
          - end
        default: end
        description: The position of the selector button.
      calendarProps:
        type: CalendarProps
        description: Props to be passed to the calendar component.
      timeInputProps:
        type: TimeInputProps
        description: Props to be passed to the time input component.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable all animations in the date picker.
      classNames:
        type: >-
          Partial<Record<"base" | "selectorButton" | "selectorIcon" | "popoverContent" | "calendar" | "calendarContent"
          | "timeInputLabel" | "timeInput", string>>
        description: Allows to set custom class names for the date-range-picker slots.
    events:
      onChange:
        type: '(value: RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime>) => void'
        description: Handler that is called when the date-range-picker's value changes.
      onOpenChange:
        type: '(isOpen: boolean) => void'
        description: Handler that is called when the date picker popover is opened or closed.
      onFocus:
        type: '(e: FocusEvent<HTMLInputElement>) => void'
        description: Handler that is called when the element receives focus.
      onBlur:
        type: '(e: FocusEvent<HTMLInputElement>) => void'
        description: Handler that is called when the element loses focus.
      onFocusChange:
        type: '(isFocused: boolean) => void'
        description: Handler that is called when the element's focus status changes.
      onKeyDown:
        type: '(e: KeyboardEvent) => void'
        description: Handler that is called when a key is pressed.
      onKeyUp:
        type: '(e: KeyboardEvent) => void'
        description: Handler that is called when a key is released.
  divider:
    package: '@heroui/divider'
    props:
      orientation:
        type: '`horizontal` | `vertical`'
        default: '`horizontal`'
        description: The orientation of the divider.
    events: {}
  drawer:
    package: '@heroui/drawer'
    props:
      children:
        type: ReactNode
        description: The content of the drawer. It's usually the DrawerContent.
      size:
        type: string
        enum:
          - xs
          - sm
          - md
          - lg
          - xl
          - 2xl
          - 3xl
          - 4xl
          - 5xl
          - full
        default: md
        description: The drawer size.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
        default: lg
        description: The drawer border radius.
      placement:
        type: string
        enum:
          - left
          - right
          - top
          - bottom
        default: right
        description: The drawer position.
      isOpen:
        type: boolean
        description: Whether the drawer is open by default (controlled).
      defaultOpen:
        type: boolean
        description: Whether the drawer is open by default (uncontrolled).
      isDismissable:
        type: boolean
        default: true
        description: Whether the drawer can be closed by clicking on the overlay or pressing the Esc key.
      isKeyboardDismissDisabled:
        type: boolean
        default: false
        description: Whether pressing the Esc key to close the drawer should be disabled.
      shouldBlockScroll:
        type: boolean
        default: true
        description: Whether the drawer should block the scroll of the page on open.
      hideCloseButton:
        type: boolean
        default: false
        description: Whether to hide the drawer close button.
      closeButton:
        type: ReactNode
        description: Custom close button to display on top right corner.
      motionProps:
        type: MotionProps
        description: The props to modify the framer motion animation. Use the variants API to create your own animation.
      portalContainer:
        type: HTMLElement
        default: document.body
        description: The container element in which the overlay portal will be placed.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the drawer should not have animations.
      classNames:
        type: Partial<Record<'wrapper' | 'base' | 'backdrop' | 'header' | 'body' | 'footer' | 'closeButton', string>>
        description: Allows to set custom class names for the drawer slots.
    events:
      onOpenChange:
        type: '(isOpen: boolean) => void'
        description: Handler that is called when the drawer's open state changes.
      onClose:
        type: () => void
        description: Handler that is called when the drawer is closed.
  dropdown:
    package: '@heroui/dropdown'
    props:
      children*:
        type: ReactNode[]
        description: The children to render. Usually a DropdownTrigger and DropdownMenu elements.
      type:
        type: string
        enum:
          - menu
          - listbox
        default: menu
        description: Type of overlay that is opened by the dropdown trigger.
      trigger:
        type: string
        enum:
          - press
          - longPress
        default: press
        description: How the dropdown menu is triggered.
      isDisabled:
        type: boolean
        default: false
        description: Whether the dropdown trigger is disabled.
      closeOnSelect:
        type: boolean
        default: true
        description: Whether the dropdown menu should be closed when an item is selected.
      shouldBlockScroll:
        type: boolean
        default: true
        description: Whether the dropdown menu should block scrolling outside the menu.
      PopoverProps:
        type: PopoverProps
        description: Since the dropdown is an extension of the popover, it accepts all the props of the popover component.
    events:
      onOpenChange:
        type: '(isOpen: boolean) => void'
        description: Handler that is called when the dropdown's open state changes.
      shouldCloseOnInteractOutside:
        type: '(e: HTMLElement) => void'
        description: >-
          When user interacts with the argument element outside of the dropdown ref, return true if onClose should be
          called.
      onClose:
        type: () => void
        description: Handler that is called when the dropdown should close.
  form:
    package: '@heroui/form'
    props:
      children:
        type: ReactNode
        description: The wrapped component.
      validationBehavior:
        type: string
        enum:
          - native
          - aria
        default: aria
        description: >-
          Whether to use native HTML form validation to prevent form submission when a field value is missing or
          invalid, or mark fields as required or invalid via ARIA.
      validationErrors:
        type: Record<string, string | string[]>
        description: >-
          Validation errors for the form, typically returned by a server. This should be set to an object mapping from
          input names to errors.
      action:
        type: string | FormHTMLAttributes<HTMLFormElement>['action']
        description: Where to send the form-data when the form is submitted. See MDN.
      encType:
        type: '''application/x-www-form-urlencoded'' | ''multipart/form-data'' | ''text/plain'''
        description: The enctype attribute specifies how the form-data should be encoded when submitting it to the server. See MDN.
      method:
        type: string
        enum:
          - get
          - post
          - dialog
        description: The HTTP method to submit the form with. See MDN.
      target:
        type: string
        enum:
          - _blank
          - _self
          - _parent
          - _top
        description: >-
          The target attribute specifies a name or a keyword that indicates where to display the response that is
          received after submitting the form. See MDN.
      autoComplete:
        type: string
        enum:
          - 'off'
          - 'on'
        description: >-
          Indicates whether input elements can by default have their values automatically completed by the browser. See
          MDN.
      autoCapitalize:
        type: string
        enum:
          - 'off'
          - none
          - 'on'
          - sentences
          - words
          - characters
        description: Controls whether inputted text is automatically capitalized and, if so, in what manner. See MDN.
      className:
        type: string
        description: The CSS className for the element.
      style:
        type: CSSProperties
        description: The inline style for the element.
    events: {}
  image:
    package: '@heroui/image'
    props:
      src:
        type: string
        description: The image source.
      srcSet:
        type: string
        description: The image srcSet.
      sizes:
        type: string
        description: The image sizes.
      alt:
        type: string
        description: The image alt.
      width:
        type: number
        description: The image width.
      height:
        type: number
        description: The image height.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The image border radius.
      shadow:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
        default: none
        description: The image shadow.
      loading:
        type: string
        enum:
          - eager
          - lazy
        description: A loading strategy to use for the image.
      fallbackSrc:
        type: string
        description: The fallback image source.
      isBlurred:
        type: boolean
        default: false
        description: Whether the image should have a duplicated blurred image at the background.
      isZoomed:
        type: boolean
        default: false
        description: Whether the image should be zoomed when hovered.
      removeWrapper:
        type: boolean
        default: false
        description: >-
          Whether to remove the wrapper element. This will cause the image to be rendered as a direct child of the
          parent element. If you set this prop as `true` neither the skeleton nor the zoom effect will work.
      disableSkeleton:
        type: boolean
        default: false
        description: Whether the image should disable the skeleton animation while loading.
      classNames:
        type: Partial<Record<"img" | "wrapper" | "zoomedWrapper" | "blurredImg", string>>
        description: Allows to set custom class names for the image slots.
    events:
      onLoad:
        type: ReactEventHandler<HTMLImageElement>
        description: Handler that is called when the image load.
      onError:
        type: () => void
        description: Handler that is called when the image fails to load.
  input-otp:
    package: '@heroui/input-otp'
    props:
      length:
        type: number
        default: 4
        description: The length of the input-otp.
      allowedKeys:
        type: regEx string
        default: ^[0-9]*$
        description: The allowed keys for the input-otp.
      variant:
        type: string
        enum:
          - flat
          - bordered
          - faded
          - underlined
        default: flat
        description: The variant of the input-otp.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the input-otp.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the input-otp.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The radius of the input-otp.
      value:
        type: string
        description: The current value of the input-otp (controlled).
      defaultValue:
        type: string
        description: The default value of the input-otp (uncontrolled).
      description:
        type: ReactNode
        description: Provides additional information or hints about the input requirements.
      errorMessage:
        type: 'ReactNode | ((v: ValidationResult) => ReactNode)'
        description: An error message for the input-otp. It is only shown when isInvalid is set to true
      fullWidth:
        type: boolean
        default: false
        description: When true, the InputOtp expands to fill its parent container width.
      isRequired:
        type: boolean
        default: false
        description: Marks the input as required for form submission.
      isReadOnly:
        type: boolean
        default: false
        description: When true, allows selection but prevents user modification.
      isDisabled:
        type: boolean
        default: false
        description: Whether the input-otp is disabled.
      isInvalid:
        type: boolean
        default: false
        description: Whether the input-otp is invalid.
      baseRef:
        type: RefObject<HTMLDivElement>
        description: The ref to the base element.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the input-otp should be animated.
      classNames:
        type: >-
          Partial<Record<'base' | 'inputWrapper' | 'input' | 'segmentWrapper' | 'segment' | 'caret' | 'passwordChar' |
          'helperWrapper' | 'description' | 'errorMessage', string>>
        description: Allows to set custom class names for the Input slots.
      autoFocus:
        type: boolean
        default: false
        description: Whether the element should receive focus on render.
      textAlign:
        type: string
        enum:
          - left
          - center
          - right
        default: center
        description: The text alignment of the input segments
      pushPasswordManagerStrategy:
        type: string
        enum:
          - none
          - hidden
          - input
        description: Strategy for password manager support
      pasteTransformer:
        type: '(text: string) => string'
        description: A function to transform pasted text before it's inserted into the input.
      containerClassName:
        type: string
        description: Class name for the input container
      noScriptCSSFallback:
        type: string
        description: CSS fallback for when JavaScript is disabled
    events:
      onChange:
        type: React.ChangeEvent<HTMLInputElement>
        description: >-
          Handler that is called when the element's value changes. You can pull out the new value by accessing
          event.target.value (string).
      onValueChange:
        type: '(value: string) => void'
        description: Handler that is called when the element's value changes.
      onComplete:
        type: '(value: string) => void'
        description: Handler that is called when the element's value is completely filled.
  input:
    package: '@heroui/input'
    props:
      children:
        type: ReactNode
        description: The content of the input.
      variant:
        type: string
        enum:
          - flat
          - bordered
          - faded
          - underlined
        default: flat
        description: The variant of the input.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the input.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the input.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The radius of the input.
      label:
        type: ReactNode
        description: The content to display as the label.
      value:
        type: string
        description: The current value of the input (controlled).
      defaultValue:
        type: string
        description: The default value of the input (uncontrolled).
      placeholder:
        type: string
        description: The placeholder of the input.
      description:
        type: ReactNode
        description: A description for the input. Provides a hint such as specific requirements for what to choose.
      errorMessage:
        type: 'ReactNode | ((v: ValidationResult) => ReactNode)'
        description: An error message for the input. It is only shown when isInvalid is set to true
      validate:
        type: '(value: string) => ValidationError | true | null | undefined'
        description: Validate input values when committing (e.g. on blur), returning error messages for invalid values.
      validationBehavior:
        type: string
        enum:
          - native
          - aria
        default: native
        description: >-
          Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default
          is `aria`. Otherwise, the default is `native`.
      minLength:
        type: number
        description: The minimum length of the text input.
      maxLength:
        type: number
        description: The maximum length of the text input.
      pattern:
        type: string
        description: A regular expression that the input value is checked against.
      type:
        type: string
        enum:
          - text
          - email
          - url
          - password
          - tel
          - search
          - file
        default: text
        description: The type of the input.
      startContent:
        type: ReactNode
        description: Element to be rendered in the left side of the input.
      endContent:
        type: ReactNode
        description: Element to be rendered in the right side of the input.
      labelPlacement:
        type: string
        enum:
          - inside
          - outside
          - outside-left
        default: inside
        description: The position of the label.
      fullWidth:
        type: boolean
        default: true
        description: Whether the input should take up the width of its parent.
      isClearable:
        type: boolean
        default: false
        description: Whether the input should have a clear button.
      isRequired:
        type: boolean
        default: false
        description: Whether user input is required on the input before form submission.
      isReadOnly:
        type: boolean
        default: false
        description: Whether the input can be selected but not changed by the user.
      isDisabled:
        type: boolean
        default: false
        description: Whether the input is disabled.
      isInvalid:
        type: boolean
        default: false
        description: Whether the input is invalid.
      baseRef:
        type: RefObject<HTMLDivElement>
        description: The ref to the base element.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the input should be animated.
      classNames:
        type: >-
          Partial<Record<'base' | 'label' | 'inputWrapper' | 'innerWrapper' | 'mainWrapper' | 'input' | 'clearButton' |
          'helperWrapper' | 'description' | 'errorMessage', string>>
        description: Allows to set custom class names for the Input slots.
    events:
      onChange:
        type: React.ChangeEvent<HTMLInputElement>
        description: >-
          Handler that is called when the element's value changes. You can pull out the new value by accessing
          event.target.value (string).
      onValueChange:
        type: '(value: string) => void'
        description: Handler that is called when the element's value changes.
      onClear:
        type: () => void
        description: Handler that is called when the clear button is clicked.
  kbd:
    package: '@heroui/kbd'
    props:
      children:
        type: ReactNode
        description: The content to display in the keyboard key.
      keys:
        type: KbdKey | KbdKey[]
        description: The keys of the keyboard key.
      classNames:
        type: Partial<Record<"base" | "abbr" | "content", string>>
        description: Allows to set custom class names for the keyboard key slots.
    events: {}
  link:
    package: '@heroui/link'
    props:
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the link.
      color:
        type: string
        enum:
          - foreground
          - primary
          - secondary
          - success
          - warning
          - danger
        default: primary
        description: The color of the link.
      underline:
        type: string
        enum:
          - none
          - hover
          - always
          - active
          - focus
        default: none
        description: The underline style of the link.
      href:
        type: string
        description: A URL to link to. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href).
      target:
        type: HTMLAttributeAnchorTarget
        description: The target window for the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target).
      rel:
        type: string
        description: >-
          The relationship between the linked resource and the current page. See
          [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).
      download:
        type: string
        enum:
          - boolean
          - string
        description: >-
          Causes the browser to download the linked URL. A string may be provided to suggest a file name. See
          [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download).
      ping:
        type: string
        description: >-
          A space-separated list of URLs to ping when the link is followed. See
          [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#ping).
      referrerPolicy:
        type: HTMLAttributeReferrerPolicy
        description: >-
          How much of the referrer to send when following the link. See
          [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#referrerpolicy).
      isExternal:
        type: boolean
        default: false
        description: Whether the link should open in a new tab.
      showAnchorIcon:
        type: boolean
        default: false
        description: Whether to show the anchor icon.
      anchorIcon:
        type: ReactNode
        description: The anchor icon.
      isBlock:
        type: boolean
        default: false
        description: Whether the link should be rendered as block with a hover effect.
      isDisabled:
        type: boolean
        default: false
        description: Whether the link is disabled.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable link and block animations.
    events:
      onPress:
        type: '(e: PressEvent) => void'
        description: Handler called when the press is released over the target.
      onPressStart:
        type: '(e: PressEvent) => void'
        description: Handler called when a press interaction starts.
      onPressEnd:
        type: '(e: PressEvent) => void'
        description: Handler called when a press interaction ends, either over the target or when the pointer leaves the target.
      onPressChange:
        type: '(isPressed: boolean) => void'
        description: Handler called when the press state changes.
      onPressUp:
        type: '(e: PressEvent) => void'
        description: >-
          Handler called when a press is released over the target, regardless of whether it started on the target or
          not.
      onKeyDown:
        type: '(e: KeyboardEvent) => void'
        description: Handler called when a key is pressed.
      onKeyUp:
        type: '(e: KeyboardEvent) => void'
        description: Handler called when a key is released.
      onClick:
        type: MouseEventHandler
        description: The native link click event handler (Deprecated) use onPress instead.
  listbox:
    package: '@heroui/listbox'
    props:
      children*:
        type: ReactNode[]
        description: The children to render. Usually a list of ListboxItem or ListboxSection
      items:
        type: Iterable<T>
        description: Item objects in the collection. (dynamic)
      variant:
        type: string
        enum:
          - solid
          - bordered
          - light
          - flat
          - faded
          - shadow
        default: solid
        description: The listbox items appearance style.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The listbox items color theme.
      selectionMode:
        type: string
        enum:
          - none
          - single
          - multiple
        description: The type of selection that is allowed in the collection.
      selectedKeys:
        type: React.Key[]
        description: The currently selected keys in the collection (controlled).
      disabledKeys:
        type: React.Key[]
        description: The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.
      defaultSelectedKeys:
        type: all | React.Key[]
        description: The initial selected keys in the collection (uncontrolled).
      disallowEmptySelection:
        type: boolean
        default: false
        description: Whether the collection allows empty selection.
      shouldHighlightOnFocus:
        type: boolean
        default: false
        description: Whether the focused item should be highlighted. It applies the same styles to the items as when hovered.
      autoFocus:
        type: string
        enum:
          - boolean
          - first
          - last
        description: Where the focus should be set.
      topContent:
        type: ReactNode
        description: The content to display above the listbox items.
      bottomContent:
        type: ReactNode
        description: The content to display below the listbox items.
      emptyContent:
        type: ReactNode
        default: No items.
        description: The content to display when the collection is empty.
      shouldFocusWrap:
        type: boolean
        default: false
        description: Whether keyboard navigation is circular.
      isVirtualized:
        type: boolean
        default: false
        description: Whether to enable virtualization.
      virtualization:
        type: Record<"maxListboxHeight" & "itemHeight", number>
        description: >-
          Configuration for virtualization, optimizing rendering for large datasets. Required if isVirtualized is set to
          true.
      hideEmptyContent:
        type: boolean
        default: false
        description: Whether to not display the empty content when the collection is empty.
      hideSelectedIcon:
        type: boolean
        default: false
        description: Whether to hide the check icon when the items are selected.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable the animation of the listbox items.
      classNames:
        type: Partial<Record<"base" | "list" | "emptyContent", string>>
        description: Allows to set custom class names for the listbox slots.
      itemClasses:
        type: Partial<Record<"base" | "wrapper" | "title" | "description" | "selectedIcon", string>>
        description: Allows to set custom class names for the listbox item slots.
    events:
      onAction:
        type: '(key: React.Key) => void'
        description: Handler that is called when an item is selected.
      onSelectionChange:
        type: '(keys: React.Key[]) => void'
        description: Handler that is called when the selection changes.
  modal:
    package: '@heroui/modal'
    props:
      children*:
        type: ReactNode
        description: The content of the modal. It's usually the `ModalContent`.
      size:
        type: string
        enum:
          - xs
          - sm
          - md
          - lg
          - xl
          - 2xl
          - 3xl
          - 4xl
          - 5xl
          - full
        default: md
        description: The modal size. This changes the modal `max-width` and `height` (full).
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
        default: lg
        description: The modal border radius.
      shadow:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
        default: lg
        description: The modal shadow.
      backdrop:
        type: string
        enum:
          - transparent
          - opaque
          - blur
        default: opaque
        description: The modal backdrop type.
      scrollBehavior:
        type: string
        enum:
          - normal
          - inside
          - outside
        default: normal
        description: The modal scroll behavior.
      placement:
        type: string
        enum:
          - auto
          - top
          - center
          - bottom
        default: auto
        description: The modal position.
      isOpen:
        type: boolean
        description: Whether the modal is open by default (controlled).
      defaultOpen:
        type: boolean
        description: Whether the modal is open by default (uncontrolled).
      isDismissable:
        type: boolean
        default: true
        description: Whether the modal can be closed by clicking on the overlay or pressing the Esc key.
      isKeyboardDismissDisabled:
        type: boolean
        default: false
        description: Whether pressing the Esc key to close the modal should be disabled.
      shouldBlockScroll:
        type: boolean
        default: true
        description: Whether the modal should block the scroll of the page on open.
      hideCloseButton:
        type: boolean
        default: false
        description: Whether to hide the modal close button.
      closeButton:
        type: ReactNode
        description: Custom close button to display on top right corner.
      motionProps:
        type: MotionProps
        description: The props to modify the framer motion animation. Use the `variants` API to create your own animation.
      portalContainer:
        type: HTMLElement
        default: document.body
        description: The container element in which the overlay portal will be placed.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the modal should not have animations.
      classNames:
        type: Partial<Record<'wrapper' | 'base' | 'backdrop' | 'header' | 'body' | 'footer' | 'closeButton', string>>
        description: Allows to set custom class names for the modal slots.
    events:
      onOpenChange:
        type: '(isOpen: boolean) => void'
        description: Handler that is called when the modal's open state changes.
      onClose:
        type: () => void
        description: Handler that is called when the modal is closed.
  navbar:
    package: '@heroui/navbar'
    props:
      children*:
        type: ReactNode[]
        description: The children to render. Usually navbar elements such as NavbarBrand, NavbarContent and NavbarItem
      height:
        type: string
        enum:
          - string
          - number
        description: The height of the navbar.
      position:
        type: string
        enum:
          - static
          - sticky
        default: sticky
        description: The position of the navbar.
      maxWidth:
        type: string
        enum:
          - sm
          - md
          - lg
          - xl
          - 2xl
          - full
        default: lg
        description: The max width of the navbar wrapper.
      parentRef:
        type: React.RefObject<HTMLElement>
        default: window
        description: >-
          The parent element where the navbar is placed within. This is used to determine the scroll position and
          whether the navbar should be hidden or not.
      isBordered:
        type: boolean
        default: false
        description: Whether the navbar should have a bottom border or not.
      isBlurred:
        type: boolean
        default: true
        description: Whether the navbar should have a blur effect or not.
      isMenuOpen:
        type: boolean
        default: false
        description: Indicates if the navbar menu is open. (controlled)
      isMenuDefaultOpen:
        type: boolean
        default: false
        description: Indicates if the navbar menu is open by default. (uncontrolled)
      shouldHideOnScroll:
        type: boolean
        default: false
        description: Indicates if the navbar should hide on scroll.
      motionProps:
        type: MotionProps
        description: >-
          The motion props to control the visible / hidden animation. This motion is only available if the
          shouldHideOnScroll prop is set to true.
      disableScrollHandler:
        type: boolean
        default: false
        description: Whether the navbar parent scroll event should be listened to or not.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the navbar menu animation should be disabled or not.
      classNames:
        type: >-
          Partial<Record<'base' | 'wrapper' | 'brand' | 'content' | 'item' | 'toggle' | 'toggleIcon' | 'menu' |
          'menuItem', string>>
        description: Allows to set custom class names for the navbar slots.
    events:
      onMenuOpenChange:
        type: '(isOpen: boolean) => void'
        description: Handler that is called when the navbar menu open state changes.
      onScrollPositionChange:
        type: '(position: number) => void'
        description: >-
          Handler that is called when the navbar parent element is scrolled. This event is only dispatched if
          disableScrollHandler is set to false or shouldHideOnScroll is set to true.
  pagination:
    package: '@heroui/pagination'
    props:
      variant:
        type: string
        enum:
          - flat
          - bordered
          - light
          - faded
        default: flat
        description: The pagination variant.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The pagination color theme.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The pagination size.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The pagination border radius.
      total:
        type: number
        default: 1
        description: The total number of pages.
      dotsJump:
        type: number
        default: 5
        description: The number of pages that are added or subtracted on the '...' button.
      initialPage:
        type: number
        default: 1
        description: The initial page. (uncontrolled)
      page:
        type: number
        description: The current page. (controlled)
      siblings:
        type: number
        default: 1
        description: The number of pages to show before and after the current page.
      boundaries:
        type: number
        default: 1
        description: The number of pages to show at the beginning and end of the pagination.
      loop:
        type: boolean
        default: false
        description: Whether the pagination should be looped.
      isCompact:
        type: boolean
        default: false
        description: Whether the pagination should have a compact style.
      isDisabled:
        type: boolean
        default: false
        description: Whether the pagination is disabled.
      showShadow:
        type: boolean
        default: false
        description: Whether the pagination cursor should have a shadow.
      showControls:
        type: boolean
        default: false
        description: Whether the pagination should have controls.
      disableCursorAnimation:
        type: boolean
        default: false
        description: Whether the pagination cursor should be hidden.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the pagination cursor should be animated.
      renderItem:
        type: PaginationItemProps
        description: The pagination item render function.
      getItemAriaLabel:
        type: '(page: string) => string'
        description: A function that allows you to customize the pagination items aria-label.
      classNames:
        type: >-
          Partial<Record<'base' | 'wrapper' | 'prev' | 'next' | 'item' | 'cursor' | 'forwardIcon' | 'ellipsis' |
          'chevronNext', string>>
        description: Allows to set custom class names for the pagination slots.
    events:
      onChange:
        type: '(page: number) => void'
        description: Handler that is called when the pagination active page changes.
  popover:
    package: '@heroui/popover'
    props:
      children*:
        type: ReactNode[]
        description: The content of the popover. It's usually the PopoverTrigger and PopoverContent.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The popover content font size.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The popover color theme.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        default: lg
        description: The popover border radius.
      shadow:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
        default: lg
        description: The popover shadow.
      backdrop:
        type: string
        enum:
          - transparent
          - opaque
          - blur
        default: transparent
        description: The popover backdrop type.
      placement:
        type: PopoverPlacement
        default: bottom
        description: The placement of the popover relative to its trigger reference.
      state:
        type: OverlayTriggerState
        description: The controlled state of the popover.
      isOpen:
        type: boolean
        description: Whether the popover is open by default (controlled).
      defaultOpen:
        type: boolean
        description: Whether the popover is open by default (uncontrolled).
      offset:
        type: number
        default: 7
        description: The distance or margin between the reference and popper.
      containerPadding:
        type: number
        default: 12
        description: The placement padding between the element and its surrounding container.
      crossOffset:
        type: number
        default: 0
        description: The additional offset applied along the cross axis between the element and its anchor element.
      triggerType:
        type: string
        enum:
          - dialog
          - menu
          - listbox
          - tree
          - grid
        default: dialog
        description: Type of popover that is opened by the trigger.
      showArrow:
        type: boolean
        default: false
        description: Whether the popover should have an arrow.
      shouldFlip:
        type: boolean
        default: true
        description: Whether the popover should change its placement and flip when it's about to overflow.
      triggerScaleOnOpen:
        type: boolean
        default: true
        description: Whether the trigger should scale down when the popover is open.
      shouldBlockScroll:
        type: boolean
        default: true
        description: Whether the popover should block the scroll outside the popover.
      shouldCloseOnScroll:
        type: boolean
        default: false
        description: Whether the popover should close on scroll.
      isKeyboardDismissDisabled:
        type: boolean
        default: false
        description: Whether pressing the escape key to close the popover should be disabled.
      shouldCloseOnBlur:
        type: boolean
        default: false
        description: Whether the popover should close when focus is lost or moves outside it.
      motionProps:
        type: MotionProps
        description: The props to modify the framer motion animation.
      portalContainer:
        type: HTMLElement
        default: document.body
        description: The container element in which the overlay portal will be placed.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the popover is animated.
      classNames:
        type: Partial<Record<'base' | 'trigger' | 'backdrop' | 'content', string>>
        description: Allows to set custom class names for the popover slots.
    events:
      onOpenChange:
        type: '(isOpen: boolean) => void'
        description: Handler that is called when the popover's open state changes.
      shouldCloseOnInteractOutside:
        type: '(e: HTMLElement) => void'
        description: >-
          When user interacts with the argument element outside of the popover ref, return true if onClose should be
          called.
      onClose:
        type: () => void
        description: Handler that is called when the popover should close.
  progress:
    package: '@heroui/progress'
    props:
      label:
        type: ReactNode
        description: The content to display as the label.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the indicator.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: primary
        description: The color of the indicator.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        default: full
        description: The progress border radius.
      value:
        type: number
        description: The current value (controlled).
      valueLabel:
        type: ReactNode
        description: The content to display as the value's label (e.g. 1 of 4).
      minValue:
        type: number
        default: 0
        description: The smallest value allowed for the input.
      maxValue:
        type: number
        default: 100
        description: The largest value allowed for the input.
      formatOptions:
        type: Intl.NumberFormat
        default: '{style: ''percent''}'
        description: The options to format the value.
      isIndeterminate:
        type: boolean
        default: false
        description: Whether the progress is indeterminate.
      isStriped:
        type: boolean
        default: false
        description: Whether the progress is striped.
      showValueLabel:
        type: boolean
        default: true
        description: Whether to show the value label.
      isDisabled:
        type: boolean
        default: false
        description: Whether the progress is disabled.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable the animation.
      classNames:
        type: Partial<Record<'base' | 'labelWrapper' | 'label' | 'track' | 'value' | 'indicator', string>>
        description: Allows to set custom class names for the progress slots.
    events: {}
  radio-group:
    package: '@heroui/radio-group'
    props:
      children:
        type: ReactNode | ReactNode[]
        description: The list of radio elements.
      label:
        type: ReactNode
        description: The label of the radio group.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the radios.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: primary
        description: The color of the radios.
      orientation:
        type: string
        enum:
          - horizontal
          - vertical
        default: vertical
        description: The orientation of the radio group.
      name:
        type: string
        description: >-
          The name of the RadioGroup, used when submitting an HTML form. See
          [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons).
      value:
        type: string[]
        description: The current selected value. (controlled)
      defaultValue:
        type: string[]
        description: The default selected value. (uncontrolled)
      description:
        type: ReactNode
        description: Radio group description.
      errorMessage:
        type: 'ReactNode | ((v: ValidationResult) => ReactNode)'
        description: Radio group error message.
      validate:
        type: '(value: string) => ValidationError | true | null | undefined'
        description: >-
          Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation
          errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time
          validation, use the `isInvalid` prop.
      validationBehavior:
        type: string
        enum:
          - native
          - aria
        default: native
        description: >-
          Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default
          is `aria`. Otherwise, the default is `native`.
      isDisabled:
        type: boolean
        default: false
        description: Whether the radio group is disabled.
      isRequired:
        type: boolean
        default: false
        description: Whether user checkboxes are required on the input before form submission.
      isReadOnly:
        type: boolean
        description: Whether the checkboxes can be selected but not changed by the user.
      isInvalid:
        type: boolean
        default: false
        description: Whether the radio group is invalid.
      validationState:
        type: string
        enum:
          - valid
          - invalid
        description: Whether the inputs should display its "valid" or "invalid" visual styling. (Deprecated) use isInvalid instead.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the animation should be disabled.
      classNames:
        type: Partial<Record<"base" | "wrapper" | "label", string>>
        description: Allows to set custom class names for the radio group slots.
    events:
      onChange:
        type: React.ChangeEvent<HTMLInputElement>
        description: >-
          Handler that is called when the element's value changes. You can pull out the new value by accessing
          event.target.value (string).
      onValueChange:
        type: '((value: string) => void)'
        description: Handler that is called when the value changes.
  range-calendar:
    package: '@heroui/range-calendar'
    props:
      value:
        type: RangeValue
        default: 'null'
        description: The current value (controlled).
      defaultValue:
        type: RangeValue
        default: 'null'
        description: The default value (uncontrolled).
      minValue:
        type: DateValue
        description: The minimum allowed date that a user may select.
      maxValue:
        type: DateValue
        description: The maximum allowed date that a user may select.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the time input.
      visibleMonths:
        type: number
        default: 1
        description: >-
          The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will
          disable the showMonthAndYearPickers prop.
      focusedValue:
        type: DateValue
        description: Controls the currently focused date within the calendar.
      defaultFocusedValue:
        type: DateValue
        description: The date that is focused when the calendar first mounts (uncountrolled).
      calendarWidth:
        type: string
        enum:
          - number
          - string
        description: >-
          The width to be applied to the calendar component. This value is multiplied by the visibleMonths number to
          determine the total width of the calendar.
      pageBehavior:
        type: PageBehavior
        default: visible
        description: >-
          Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration
          (default) or one unit of visibleDuration.
      weekdayStyle:
        type: string
        enum:
          - narrow
          - short
          - long
        default: narrow
        description: The style of weekday names to display in the calendar grid header.
      showMonthAndYearPickers:
        type: boolean
        default: false
        description: Whether to show month and year pickers.
      allowsNonContiguousRanges:
        type: boolean
        default: false
        description: >-
          When combined with isDateUnavailable, determines whether non-contiguous ranges, i.e. ranges containing
          unavailable dates, may be selected.
      isDisabled:
        type: boolean
        default: false
        description: Whether the calendar is disabled.
      isReadOnly:
        type: boolean
        default: false
        description: Whether the calendar value is immutable.
      isInvalid:
        type: boolean
        description: Whether the current selection is invalid according to application logic.
      autoFocus:
        type: boolean
        default: false
        description: Whether to automatically focus the calendar when it mounts.
      showHelper:
        type: boolean
        default: false
        description: Whether to show the description or error message.
      showShadow:
        type: boolean
        default: false
        description: Whether to show the shadow in the selected dates.
      topContent:
        type: ReactNode
        description: Custom content to be included in the top of the calendar.
      bottomContent:
        type: ReactNode
        description: Custom content to be included in the bottom of the calendar.
      isDateUnavailable:
        type: '(date: DateValue) => boolean'
        description: Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.
      createCalendar:
        type: '(calendar: SupportedCalendars) => Calendar | null'
        default: all calendars
        description: This function helps to reduce the bundle size by providing a custom calendar system.
      errorMessage:
        type: 'ReactNode | (v: ValidationResult) => ReactNode'
        description: An error message for the field.
      validate:
        type: '(value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined'
        description: Validate input values when committing (e.g. on blur), returning error messages for invalid values.
      hideDisabledDates:
        type: boolean
        default: false
        description: Whether to hide the disabled or invalid dates.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable the animation of the calendar.
    events:
      onFocusChange:
        type: '(date: CalendarDate) => void'
        description: Handler that is called when the focused date changes.
      onChange:
        type: '(value: RangeValue<DateValue> | null) => void'
        description: Handler that is called when the value changes.
  scroll-shadow:
    package: '@heroui/scroll-shadow'
    props:
      size:
        type: number
        default: 40
        description: The shadow size in pixels.
      offset:
        type: number
        default: 0
        description: The scroll offset to show the shadow in pixels.
      hideScrollBar:
        type: boolean
        default: false
        description: Whether to hide the scrollbar or not.
      orientation:
        type: string
        enum:
          - horizontal
          - vertical
        default: vertical
        description: The scroll orientation.
      isEnabled:
        type: boolean
        default: true
        description: Whether the shadow is enabled or not.
      visibility:
        type: ScrollShadowVisibility
        default: auto
        description: The shadow visibility. (controlled)
    events:
      onVisibilityChange:
        type: '(visibility: ScrollShadowVisibility) => void'
        description: Callback invoked when the shadow visibility changes.
  select:
    package: '@heroui/select'
    props:
      children*:
        type: ReactNode[]
        description: The children to render. Usually a list of SelectItem and SelectSection elements.
      items:
        type: Iterable<T>
        description: Item objects in the select. (dynamic)
      selectionMode:
        type: string
        enum:
          - single
          - multiple
        description: The type of selection that is allowed in the collection.
      selectedKeys:
        type: all | Iterable<React.Key>
        description: The currently selected keys in the collection (controlled).
      disabledKeys:
        type: Iterable<React.Key>
        description: The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.
      defaultSelectedKeys:
        type: all | Iterable<React.Key>
        description: The initial selected keys in the collection (uncontrolled).
      variant:
        type: string
        enum:
          - flat
          - bordered
          - faded
          - underlined
        default: flat
        description: The variant of the select.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the select.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the select.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The radius of the select.
      placeholder:
        type: string
        default: Select an option
        description: The placeholder of the select.
      labelPlacement:
        type: string
        enum:
          - inside
          - outside
          - outside-left
        default: inside
        description: The position of the label.
      label:
        type: ReactNode
        description: The content to display as the label.
      description:
        type: ReactNode
        description: A description for the select. Provides a hint such as specific requirements for what to choose.
      errorMessage:
        type: 'ReactNode | ((v: ValidationResult) => ReactNode)'
        description: An error message for the select.
      startContent:
        type: ReactNode
        description: Element to be rendered in the left side of the select.
      endContent:
        type: ReactNode
        description: Element to be rendered in the right side of the select.
      selectorIcon:
        type: ReactNode
        description: Element to be rendered as the selector icon.
      scrollRef:
        type: React.RefObject<HTMLElement>
        description: A ref to the scrollable element.
      spinnerRef:
        type: React.RefObject<HTMLElement>
        description: A ref to the spinner element.
      maxListboxHeight:
        type: number
        default: 256
        description: The maximum height of the listbox in pixels. Required when using virtualization.
      itemHeight:
        type: number
        default: 32
        description: The fixed height of each item in pixels. Required when using virtualization.
      isVirtualized:
        type: boolean
        description: Whether to enable virtualization. By default, it's enabled when the number of items exceeds 50.
      fullWidth:
        type: boolean
        default: true
        description: Whether the select should take up the width of its parent.
      isOpen:
        type: boolean
        description: Whether the select is open by default (controlled).
      defaultOpen:
        type: boolean
        description: Whether the select is open by default (uncontrolled).
      isRequired:
        type: boolean
        default: false
        description: Whether user select is required on the select before form submission.
      isDisabled:
        type: boolean
        default: false
        description: Whether the select is disabled.
      isMultiline:
        type: boolean
        default: false
        description: Whether the select should allow multiple lines of text.
      isInvalid:
        type: boolean
        default: false
        description: Whether the select is invalid.
      validationState:
        type: string
        enum:
          - valid
          - invalid
        description: Whether the select should display its "valid" or "invalid" visual styling. (Deprecated) use isInvalid instead.
      showScrollIndicators:
        type: boolean
        default: true
        description: Whether the select should show scroll indicators when the listbox is scrollable.
      autoFocus:
        type: boolean
        default: false
        description: Whether the select should be focused on the first mount.
      disallowEmptySelection:
        type: boolean
        default: false
        description: Whether the collection allows empty selection.
      disableAnimation:
        type: boolean
        default: true
        description: Whether the select should be animated.
      disableSelectorIconRotation:
        type: boolean
        default: false
        description: Whether the select should disable the rotation of the selector icon.
      hideEmptyContent:
        type: boolean
        default: false
        description: Whether the listbox will be prevented from opening when there are no items.
      popoverProps:
        type: PopoverProps
        description: Props to be passed to the popover component.
      listboxProps:
        type: ListboxProps
        description: Props to be passed to the listbox component.
      scrollShadowProps:
        type: ScrollShadowProps
        description: Props to be passed to the scroll shadow component.
      classNames:
        type: >-
          Partial<Record<"base"｜ "label"｜ "trigger"｜ "mainWrapper" ｜ "innerWrapper"｜ "selectorIcon" ｜ "value" ｜
          "listboxWrapper"｜ "listbox" ｜ "popoverContent" ｜ "helperWrapper" ｜ "description" ｜ "errorMessage", string>>
        description: Allows to set custom class names for the Select slots.
    events:
      onClose:
        type: () => void
        description: Callback fired when the select popover is closed.
      onOpenChange:
        type: '(isOpen: boolean) => void'
        description: Callback fired when the select popover is opened or closed.
      onSelectionChange:
        type: '(keys: "all" | Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void'
        description: Callback fired when the selected keys change.
      onChange:
        type: React.ChangeEvent<HTMLSelectElement>
        description: Native select change event, fired when the selected value changes.
      renderValue:
        type: RenderValueFunction
        description: Function to render the value of the select. It renders the selected item by default.
  skeleton:
    package: '@heroui/skeleton'
    props:
      children:
        type: ReactNode
        description: The content of the skeleton.
      isLoaded:
        type: boolean
        default: false
        description: Whether the skeleton is loaded.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable the animations.
      classNames:
        type: Partial<Record<"base" | "content", string>>
        description: Allows to set custom class names for the skeleton slots.
    events: {}
  slider:
    package: '@heroui/slider'
    props:
      label:
        type: ReactNode
        description: The content to display as the label.
      name:
        type: string
        description: The name of the input element, used when submitting an HTML form.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the Slider filler and thumb.
      color:
        type: string
        enum:
          - foreground
          - primary
          - secondary
          - success
          - warning
          - danger
        default: primary
        description: The color of the filler and thumb.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        default: full
        description: The Slider's thumbs border radius.
      step:
        type: number
        default: 1
        description: The Slider's step value.
      value:
        type: number
        description: The current value (controlled).
      defaultValue:
        type: number
        description: The default value (uncontrolled).
      minValue:
        type: number
        default: 0
        description: The slider's minimum value.
      maxValue:
        type: number
        default: 100
        description: The slider's maximum value.
      orientation:
        type: string
        enum:
          - horizontal
          - vertical
        default: horizontal
        description: The orientation of the Slider.
      fillOffset:
        type: number
        description: The offset from which to start the fill.
      showSteps:
        type: boolean
        default: false
        description: Whether to show the steps indicators.
      showTooltip:
        type: boolean
        default: false
        description: Whether to show a tooltip with the current thumb value when the user hovers or drags the thumb.
      marks:
        type: SliderStepMarks
        description: The marks to display on the Slider's steps.
      startContent:
        type: ReactNode
        description: The content to display at the beginning of the Slider.
      endContent:
        type: ReactNode
        description: The content to display at the end of the Slider.
      formatOptions:
        type: Intl.NumberFormat
        description: The options to format the value.
      tooltipValueFormatOptions:
        type: Intl.NumberFormat
        description: The options to format the tooltip value.
      tooltipProps:
        type: TooltipProps
        description: The props to pass to the thumbs's tooltip.
      showOutline:
        type: boolean
        default: false
        description: Whether to show a small outline around the thumbs.
      hideValue:
        type: boolean
        default: false
        description: Whether to hide the Slider value.
      hideThumb:
        type: boolean
        default: false
        description: Whether to hide all the Slider thumbs.
      disableThumbScale:
        type: boolean
        default: false
        description: Whether to disable the thumb scale animation.
      isDisabled:
        type: boolean
        default: false
        description: Whether the whole Slider is disabled.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable the Slider animations.
    events:
      getValue:
        type: '(value: SliderValue) => string'
        description: A function to format the value. Overrides default formatted number.
      renderLabel:
        type: '(props: DOMAttributes<HTMLLabelElement>) => ReactNode'
        description: A function to render the label.
      renderValue:
        type: '(props: DOMAttributes<HTMLOutputElement>) => ReactNode'
        description: A function to render the value.
      renderThumb:
        type: '(props: DOMAttributes<HTMLDivElement> & {index?: number}) => ReactNode'
        description: A function to render the thumbs. The index prop will tell you which thumb is being rendered.
  snippet:
    package: '@heroui/snippet'
    props:
      children:
        type: ReactNode | ReactNode[]
        description: The content of the snippet.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the snippet.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
        default: lg
        description: The radius of the snippet.
      symbol:
        type: string
        enum:
          - string
          - ReactNode
        description: The symbol to show before the snippet.
      timeout:
        type: number
        default: 2000
        description: The time in milliseconds to wait before resetting the clipboard.
      codeString:
        type: string
        description: The code string to copy. if codeString is passed, it will be copied instead of the children.
      tooltipProps:
        type: TooltipProps
        description: The props of the tooltip.
      copyIcon:
        type: ReactNode
        description: The copy icon.
      checkIcon:
        type: ReactNode
        description: The check icon.
      disableTooltip:
        type: boolean
        default: false
        description: Whether to disable the tooltip.
      disableCopy:
        type: boolean
        default: false
        description: Whether to disable the copy button.
      hideCopyButton:
        type: boolean
        default: false
        description: Whether to hide the copy button.
      hideSymbol:
        type: boolean
        default: false
        description: Whether to hide the symbol.
      copyButtonProps:
        type: ButtonProps
        description: The props of the copy button.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable the animations.
      classNames:
        type: Partial<Record<'base' | 'content' | 'pre' | 'symbol' | 'copyButton' | 'checkIcon', string>>
        description: Allows to set custom class names for the snippet slots.
    events:
      onCopy:
        type: '(value: string | string[]) => void'
        description: Handler that is called when the code is copied.
  spacer:
    package: '@heroui/spacer'
    props:
      x:
        type: Space
        default: '1'
        description: The x axis space
      'y':
        type: Space
        default: '1'
        description: The y axis space
    events: {}
  spinner:
    package: '@heroui/spinner'
    props:
      label:
        type: string
        description: The content to display as the label.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the spinner circles.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: primary
        description: The color of the spinner circles.
      labelColor:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the label.
      classNames:
        type: Partial<Record<"base"｜"wrapper"｜"circle1"｜"circle2"｜"label", string>>
        description: Allows to set custom class names for the spinner slots.
    events: {}
  switch:
    package: '@heroui/switch'
    props:
      children:
        type: ReactNode
        description: The label of the switch.
      value:
        type: string
        description: The value of the input element, used when submitting an HTML form.
      name:
        type: string
        description: The name of the input element, used when submitting an HTML form.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the switch.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: primary
        description: The color of the switch.
      thumbIcon:
        type: ThumbIconProps
        description: The icon to be displayed when the switch is checked.
      startContent:
        type: ReactNode
        description: The icon to be displayed at the start of the switch.
      endContent:
        type: ReactNode
        description: The icon to be displayed at the end of the switch.
      isSelected:
        type: boolean
        description: Whether the element should be selected (controlled).
      defaultSelected:
        type: boolean
        description: Whether the element should be selected (uncontrolled).
      isReadOnly:
        type: boolean
        description: Whether the input can be selected but not changed by the user.
      isDisabled:
        type: boolean
        default: false
        description: Whether the switch is disabled.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the animation should be disabled.
      classNames:
        type: Partial<Record<"base"｜ "wrapper"｜ "thumb"｜ "label" ｜ "startContent" ｜ "endContent" ｜ "thumbIcon" , string>>
        description: Allows to set custom class names for the switch slots.
    events:
      onChange:
        type: React.ChangeEvent<HTMLInputElement>
        description: >-
          Handler that is called when the element's selection state changes. You can pull out the new checked state by
          accessing event.target.checked (boolean).
      onValueChange:
        type: '(isSelected: boolean) => void'
        description: Handler that is called when the element's selection state changes.
  table:
    package: '@heroui/table'
    props:
      children*:
        type: ReactNode[]
        description: The elements that make up the table. Includes the TableHeader, TableBody, TableColumn, and TableRow.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: Color of the selected rows, and checkboxes.
      layout:
        type: string
        enum:
          - auto
          - fixed
        default: auto
        description: Defines the layout of the table.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
        default: lg
        description: The border-radius of the table.
      shadow:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
        default: sm
        description: The shadow size of the table.
      hideHeader:
        type: boolean
        default: false
        description: Whether to hide the table header.
      isStriped:
        type: boolean
        default: false
        description: Whether to apply striped rows in the table.
      isCompact:
        type: boolean
        default: false
        description: Whether to apply compact style to the table.
      isHeaderSticky:
        type: boolean
        default: false
        description: Whether to make the table header sticky.
      fullWidth:
        type: boolean
        default: true
        description: Whether to make the table full width.
      removeWrapper:
        type: boolean
        default: false
        description: Whether the table base container should not be rendered.
      BaseComponent:
        type: React.ComponentType<any>
        default: div
        description: A custom wrapper component for the table.
      topContent:
        type: ReactNode
        description: Provides content to include a component in the top of the table.
      bottomContent:
        type: ReactNode
        description: Provides content to include a component in the bottom of the table.
      topContentPlacement:
        type: string
        enum:
          - inside
          - outside
        default: inside
        description: Where to place the topContent component.
      bottomContentPlacement:
        type: string
        enum:
          - inside
          - outside
        default: inside
        description: Where to place the bottomContent component.
      showSelectionCheckboxes:
        type: boolean
        description: Whether the row selection checkboxes should be displayed.
      sortDescriptor:
        type: SortDescriptor
        description: The current sorted column and direction.
      selectedKeys:
        type: Selection
        description: The currently selected keys in the collection (controlled).
      defaultSelectedKeys:
        type: Selection
        description: The initial selected keys in the collection (uncontrolled).
      disabledKeys:
        type: Selection
        description: A set of keys for rows that are disabled.
      disallowEmptySelection:
        type: boolean
        description: Whether the collection allows empty selection.
      selectionMode:
        type: string
        enum:
          - single
          - multiple
          - none
        default: none
        description: The type of selection that is allowed in the collection.
      selectionBehavior:
        type: string
        enum:
          - toggle
          - replace
        default: toggle
        description: How multiple selection should behave in the collection.
      disabledBehavior:
        type: string
        enum:
          - selection
          - all
        default: selection
        description: Whether disabledKeys applies to all interactions, or only selection.
      allowDuplicateSelectionEvents:
        type: boolean
        description: Whether onSelectionChange should fire even if the new set of keys is the same as the last.
      disableAnimation:
        type: boolean
        default: false
        description: Whether to disable the table and checkbox animations.
      checkboxesProps:
        type: CheckboxProps
        description: Props to be passed to the checkboxes.
      classNames:
        type: >-
          Partial<Record<'base' | 'table' | 'thead' | 'tbody' | 'tfoot' | 'emptyWrapper' | 'loadingWrapper' | 'wrapper'
          | 'tr' | 'th' | 'td' | 'sortIcon', string>>
        description: Allows to set custom class names for the dropdown item slots.
      isKeyboardNavigationDisabled:
        type: boolean
        default: false
        description: Whether to disable keyboard navigations or not.
    events:
      onRowAction:
        type: '(key: React.Key) => void'
        description: Handler that is called when a user performs an action on the row.
      onCellAction:
        type: '(key: React.Key) => void'
        description: Handler that is called when a user performs an action on the cell.
      onSelectionChange:
        type: '(keys: Selection) => any'
        description: Handler that is called when the selection changes.
      onSortChange:
        type: '(descriptor: SortDescriptor) => any'
        description: Handler that is called when the sorted column or direction changes.
  tabs:
    package: '@heroui/tabs'
    props:
      children*:
        type: 'ReactNode | ((item: T) => ReactElement)'
        description: The list of tabs.
      variant:
        type: string
        enum:
          - solid
          - bordered
          - light
          - underlined
        default: solid
        description: The tabs appearance style.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The tabs color theme.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The tabs size.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The tabs border radius.
      fullWidth:
        type: boolean
        default: false
        description: Whether the tabs should take the full width of its parent.
      items:
        type: Iterable<T>
        description: The list of tabs (dynamic).
      disabledKeys:
        type: React.Key[]
        description: The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.
      selectedKey:
        type: React.Key
        description: The key for the currently selected item.
      defaultSelectedKey:
        type: React.Key
        description: The key for the initially selected item.
      shouldSelectOnPressUp:
        type: boolean
        default: true
        description: Whether the tabs selection should occur on press up instead of press down.
      keyboardActivation:
        type: string
        enum:
          - automatic
          - manual
        default: automatic
        description: Whether tabs are activated automatically on focus or manually.
      motionProps:
        type: MotionProps
        description: The props to modify the cursor framer motion animation. Use the variants API to create your own animation.
      disableCursorAnimation:
        type: boolean
        default: false
        description: Whether the cursor should be hidden.
      isDisabled:
        type: boolean
        default: false
        description: Whether the tab list should be disabled.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the tab list should be animated.
      classNames:
        type: Partial<Record<"base"｜ "tabList"｜ "tab"｜ "tabContent"｜ "cursor" ｜ "panel", string>>
        description: Allows to set custom class names for the card slots.
      placement:
        type: string
        enum:
          - top
          - bottom
          - start
          - end
        default: top
        description: The position of the tabs.
      isVertical:
        type: boolean
        default: false
        description: Whether the tabs are vertical.
      destroyInactiveTabPanel:
        type: boolean
        default: true
        description: >-
          Whether to destroy inactive tab panel when switching tabs. Inactive tab panels are inert and cannot be
          interacted with.
    events:
      onSelectionChange:
        type: '(key: React.Key) => any'
        description: Handler that is called when the selection changes.
  textarea:
    package: '@heroui/textarea'
    props:
      children:
        type: ReactNode
        description: The content of the textarea.
      minRows:
        type: number
        default: 3
        description: The minimum number of rows to display.
      maxRows:
        type: number
        default: 8
        description: Maximum number of rows up to which the textarea can grow.
      cacheMeasurements:
        type: boolean
        default: false
        description: Reuse previously computed measurements when computing height of textarea.
      variant:
        type: string
        enum:
          - flat
          - bordered
          - faded
          - underlined
        default: flat
        description: The variant of the textarea.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the textarea.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the textarea.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The radius of the textarea.
      label:
        type: ReactNode
        description: The content to display as the label.
      value:
        type: string
        description: The current value of the textarea (controlled).
      defaultValue:
        type: string
        description: The default value of the textarea (uncontrolled).
      placeholder:
        type: string
        description: The placeholder of the textarea.
      startContent:
        type: ReactNode
        description: Element to be rendered in the left side of the input.
      endContent:
        type: ReactNode
        description: Element to be rendered in the right side of the input.
      description:
        type: ReactNode
        description: A description for the textarea. Provides a hint such as specific requirements for what to choose.
      errorMessage:
        type: 'ReactNode | ((v: ValidationResult) => ReactNode)'
        description: An error message for the textarea.
      validate:
        type: '(value: string) => ValidationError | true | null | undefined'
        description: Validate input values when committing (e.g. on blur), returning error messages for invalid values.
      validationBehavior:
        type: string
        enum:
          - native
          - aria
        default: native
        description: >-
          Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default
          is `aria`. Otherwise, the default is `native`.
      labelPlacement:
        type: string
        enum:
          - inside
          - outside
          - outside-left
        default: inside
        description: The position of the label.
      fullWidth:
        type: boolean
        default: true
        description: Whether the textarea should take up the width of its parent.
      isRequired:
        type: boolean
        default: false
        description: Whether user input is required on the textarea before form submission.
      isReadOnly:
        type: boolean
        description: Whether the textarea can be selected but not changed by the user.
      isDisabled:
        type: boolean
        default: false
        description: Whether the textarea is disabled.
      isClearable:
        type: boolean
        default: false
        description: Whether the textarea should have a clear button.
      isInvalid:
        type: boolean
        default: false
        description: Whether the textarea is invalid.
      validationState:
        type: string
        enum:
          - valid
          - invalid
        description: >-
          Whether the textarea should display its "valid" or "invalid" visual styling. (Deprecated) use isInvalid
          instead.
      disableAutosize:
        type: boolean
        default: false
        description: Whether the textarea auto vertically resize should be disabled.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the textarea should be animated.
      classNames:
        type: >-
          Partial<Record<"base" | "label" | "inputWrapper" | "innerWrapper" | "input" | "description" | "errorMessage",
          string>>
        description: Allows to set custom class names for the checkbox slots.
    events:
      onChange:
        type: React.ChangeEvent<HTMLInputElement>
        description: >-
          Handler that is called when the element's value changes. You can pull out the new value by accessing
          event.target.value (string).
      onValueChange:
        type: '(value: string) => void'
        description: Handler that is called when the element's value changes.
      onClear:
        type: () => void
        description: Handler that is called when the clear button is clicked.
      onHeightChange:
        type: '(height: number, meta: { rowHeight: number }) => void'
        description: Handler that is called when the height of the textarea changes.
  time-input:
    package: '@heroui/time-input'
    props:
      label:
        type: ReactNode
        description: The content to display as the label.
      name:
        type: string
        description: The name of the time input element, used when submitting an HTML form.
      value:
        type: string
        enum:
          - TimeValue
          - 'null'
        description: The current value (controlled).
      defaultValue:
        type: string
        enum:
          - TimeValue
          - 'null'
        description: The default value (uncontrolled).
      variant:
        type: string
        enum:
          - flat
          - bordered
          - faded
          - underlined
        default: flat
        description: The variant of the time input.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The color of the time input.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The size of the time input.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        description: The radius of the time input.
      hourCycle:
        type: string
        enum:
          - '12'
          - '24'
        description: Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.
      granularity:
        type: string
        enum:
          - hour
          - minute
          - second
        default: minute
        description: Determines the smallest unit that is displayed in the time picker.
      hideTimeZone:
        type: boolean
        description: Whether to hide the time zone abbreviation.
      labelPlacement:
        type: string
        enum:
          - inside
          - outside
          - outside-left
        default: inside
        description: The position of the label.
      shouldForceLeadingZeros:
        type: boolean
        default: true
        description: Whether to always show leading zeros in the hour field. By default, this is determined by the user's locale.
      placeholderValue:
        type: TimeValue
        description: A placeholder time that influences the format of the placeholder shown when no value is selected.
      minValue:
        type: TimeValue
        description: The minimum allowed time that a user may select.
      maxValue:
        type: TimeValue
        description: The maximum allowed time that a user may select.
      isDisabled:
        type: boolean
        description: Whether the time input is disabled.
      isReadOnly:
        type: boolean
        description: Whether the time input can be selected but not changed by the user.
      isRequired:
        type: boolean
        description: Whether user time input is required on the time input before form submission.
      isInvalid:
        type: boolean
        description: Whether the time input is invalid.
      autoFocus:
        type: boolean
        description: Whether the element should receive focus on render.
      description:
        type: ReactNode
        description: A description for the field. Provides a hint such as specific requirements for what to choose.
      errorMessage:
        type: 'ReactNode | (v: ValidationResult) => ReactNode'
        description: An error message for the field.
      validate:
        type: '(value: MappedTimeValue<TimeValue>) => ValidationError | true | null | undefined'
        description: Validate input values when committing (e.g. on blur), returning error messages for invalid values.
      validationBehavior:
        type: string
        enum:
          - native
          - aria
        default: native
        description: >-
          Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default
          is `aria`. Otherwise, the default is `native`.
      disableAnimation:
        type: boolean
        description: Whether to disable the animation of the time input.
      classNames:
        type: >-
          Partial<Record<"base" | "label" | "inputWrapper" | "innerWrapper" | "segment" | "helperWrapper" | "input" |
          "description" | "errorMessage", string>>
        description: Allows to set custom class names for the time input slots.
    events:
      onFocus:
        type: '(e: FocusEvent<Target>) => void'
        description: Handler that is called when the element receives focus.
      onBlur:
        type: '(e: FocusEvent<Target>) => void'
        description: Handler that is called when the element loses focus.
      onFocusChange:
        type: '(isFocused: boolean) => void'
        description: Handler that is called when the element's focus status changes.
      onKeyDown:
        type: '(e: KeyboardEvent) => void'
        description: Handler that is called when a key is pressed.
      onKeyUp:
        type: '(e: KeyboardEvent) => void'
        description: Handler that is called when a key is released.
      onChange:
        type: '(value: MappedTimeValue<TimeValue>) => void'
        description: Handler that is called when the value changes.
  tooltip:
    package: '@heroui/tooltip'
    props:
      children*:
        type: ReactNode[]
        description: The children to render. Usually a trigger element.
      content:
        type: ReactNode
        description: The content to render inside the tooltip.
      size:
        type: string
        enum:
          - sm
          - md
          - lg
        default: md
        description: The tooltip size. This change the content font size.
      color:
        type: string
        enum:
          - default
          - primary
          - secondary
          - success
          - warning
          - danger
        default: default
        description: The tooltip color theme.
      radius:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
          - full
        default: md
        description: The tooltip border radius.
      shadow:
        type: string
        enum:
          - none
          - sm
          - md
          - lg
        default: sm
        description: The tooltip shadow.
      placement:
        type: TooltipPlacement
        default: top
        description: The placement of the tooltip relative to its trigger reference.
      delay:
        type: number
        default: 0
        description: The delay in milliseconds before the tooltip opens.
      closeDelay:
        type: number
        default: 500
        description: The delay in milliseconds before the tooltip closes.
      isOpen:
        type: boolean
        description: Whether the tooltip is open by default (controlled).
      defaultOpen:
        type: boolean
        description: Whether the tooltip is open by default (uncontrolled).
      offset:
        type: number
        default: 7
        description: The distance or margin between the reference and popper. It is used internally to create an offset modifier.
      containerPadding:
        type: number
        default: 12
        description: The placement padding that should be applied between the element and its surrounding container.
      crossOffset:
        type: number
        default: 0
        description: The additional offset applied along the cross axis between the element and its anchor element.
      showArrow:
        type: boolean
        default: false
        description: Whether the tooltip should have an arrow.
      shouldFlip:
        type: boolean
        default: true
        description: Whether the tooltip should change its placement and flip when it's about to overflow its boundary area.
      triggerScaleOnOpen:
        type: boolean
        default: true
        description: Whether the trigger should scale down when the tooltip is open.
      shouldBlockScroll:
        type: boolean
        default: true
        description: Whether to block scrolling outside the tooltip.
      isKeyboardDismissDisabled:
        type: boolean
        default: false
        description: Whether pressing the escape key to close the tooltip should be disabled.
      isDismissable:
        type: boolean
        default: false
        description: Whether to close the overlay when the user interacts outside it.
      shouldCloseOnBlur:
        type: boolean
        default: true
        description: Whether the tooltip should close when focus is lost or moves outside it.
      motionProps:
        type: MotionProps
        description: The props to modify the framer motion animation. Use the variants API to create your own animation.
      portalContainer:
        type: HTMLElement
        default: document.body
        description: The container element in which the overlay portal will be placed.
      updatePositionDeps:
        type: any[]
        default: '[]'
        description: The dependencies to force the tooltip position update.
      isDisabled:
        type: boolean
        default: false
        description: Whether the tooltip is disabled.
      disableAnimation:
        type: boolean
        default: false
        description: Whether the tooltip is animated.
      classNames:
        type: Partial<Record<"base"｜"content", string>>
        description: Allows to set custom class names for the tooltip slots.
    events:
      onOpenChange:
        type: '(isOpen: boolean) => void'
        description: Handler that is called when the tooltip's open state changes.
      shouldCloseOnInteractOutside:
        type: '(e: HTMLElement) => void'
        description: >-
          When user interacts with the argument element outside of the tooltip ref, return true if onClose should be
          called. This gives you a chance to filter out interaction with elements that should not dismiss the tooltip.
          By default, onClose will always be called on interaction outside the overlay ref.
      onClose:
        type: () => void
        description: Handler that is called when the tooltip should close.
  user:
    package: '@heroui/user'
    props:
      name:
        type: string
        description: The name of the user.
      description:
        type: ReactNode
        description: The description component.
      isFocusable:
        type: boolean
        default: false
        description: Whether the user is focusable. This is useful when using `Dropdown` or similar components.
      avatarProps:
        type: AvatarProps
        description: The avatar component props. The `name` is passed by default.
      classNames:
        type: Partial<Record<"base" | "wrapper" | "name" | "description", string>>
        description: Allows to set custom class names for the user slots.
    events: {}
